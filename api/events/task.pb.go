// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: task.proto

package events

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	codec "github.com/kcarretto/paragon/api/codec"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TaskQueued struct {
	Id      string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content string               `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Filter  *codec.AgentMetadata `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (m *TaskQueued) Reset()      { *m = TaskQueued{} }
func (*TaskQueued) ProtoMessage() {}
func (*TaskQueued) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{0}
}
func (m *TaskQueued) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskQueued) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskQueued.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskQueued) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskQueued.Merge(m, src)
}
func (m *TaskQueued) XXX_Size() int {
	return m.Size()
}
func (m *TaskQueued) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskQueued.DiscardUnknown(m)
}

var xxx_messageInfo_TaskQueued proto.InternalMessageInfo

func (m *TaskQueued) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskQueued) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *TaskQueued) GetFilter() *codec.AgentMetadata {
	if m != nil {
		return m.Filter
	}
	return nil
}

type TaskClaimed struct {
	Id    string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Agent *codec.AgentMetadata `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (m *TaskClaimed) Reset()      { *m = TaskClaimed{} }
func (*TaskClaimed) ProtoMessage() {}
func (*TaskClaimed) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{1}
}
func (m *TaskClaimed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskClaimed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskClaimed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskClaimed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskClaimed.Merge(m, src)
}
func (m *TaskClaimed) XXX_Size() int {
	return m.Size()
}
func (m *TaskClaimed) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskClaimed.DiscardUnknown(m)
}

var xxx_messageInfo_TaskClaimed proto.InternalMessageInfo

func (m *TaskClaimed) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskClaimed) GetAgent() *codec.AgentMetadata {
	if m != nil {
		return m.Agent
	}
	return nil
}

type TaskExecuted struct {
	Id            string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Output        []string             `protobuf:"bytes,2,rep,name=output,proto3" json:"output,omitempty"`
	Error         string               `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	ExecStartTime int64                `protobuf:"varint,4,opt,name=execStartTime,proto3" json:"execStartTime,omitempty"`
	ExecStopTime  int64                `protobuf:"varint,5,opt,name=execStopTime,proto3" json:"execStopTime,omitempty"`
	RecvTime      int64                `protobuf:"varint,6,opt,name=recvTime,proto3" json:"recvTime,omitempty"`
	Agent         *codec.AgentMetadata `protobuf:"bytes,7,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (m *TaskExecuted) Reset()      { *m = TaskExecuted{} }
func (*TaskExecuted) ProtoMessage() {}
func (*TaskExecuted) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{2}
}
func (m *TaskExecuted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskExecuted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskExecuted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskExecuted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskExecuted.Merge(m, src)
}
func (m *TaskExecuted) XXX_Size() int {
	return m.Size()
}
func (m *TaskExecuted) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskExecuted.DiscardUnknown(m)
}

var xxx_messageInfo_TaskExecuted proto.InternalMessageInfo

func (m *TaskExecuted) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskExecuted) GetOutput() []string {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *TaskExecuted) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TaskExecuted) GetExecStartTime() int64 {
	if m != nil {
		return m.ExecStartTime
	}
	return 0
}

func (m *TaskExecuted) GetExecStopTime() int64 {
	if m != nil {
		return m.ExecStopTime
	}
	return 0
}

func (m *TaskExecuted) GetRecvTime() int64 {
	if m != nil {
		return m.RecvTime
	}
	return 0
}

func (m *TaskExecuted) GetAgent() *codec.AgentMetadata {
	if m != nil {
		return m.Agent
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskQueued)(nil), "events.TaskQueued")
	proto.RegisterType((*TaskClaimed)(nil), "events.TaskClaimed")
	proto.RegisterType((*TaskExecuted)(nil), "events.TaskExecuted")
}

func init() { proto.RegisterFile("task.proto", fileDescriptor_ce5d8dd45b4a91ff) }

var fileDescriptor_ce5d8dd45b4a91ff = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4e, 0xc2, 0x40,
	0x14, 0xc6, 0x3b, 0x20, 0x45, 0x1e, 0xe8, 0x62, 0x82, 0xa6, 0x61, 0x31, 0x21, 0x8d, 0x8b, 0xc6,
	0x18, 0x48, 0xd4, 0x0b, 0xa8, 0x71, 0xe1, 0xc2, 0x85, 0x95, 0x0b, 0x8c, 0xed, 0xd3, 0x34, 0x40,
	0xa7, 0x29, 0xaf, 0x84, 0xa5, 0x47, 0xf0, 0x18, 0x1e, 0xc5, 0x25, 0x4b, 0x56, 0x46, 0xa6, 0x1b,
	0x97, 0x1c, 0xc1, 0x74, 0x8a, 0x1a, 0x12, 0x8c, 0xcb, 0xef, 0x4f, 0x7e, 0xdf, 0xbc, 0x0c, 0x00,
	0xc9, 0xc9, 0xb0, 0x97, 0xa4, 0x8a, 0x14, 0xb7, 0x71, 0x8a, 0x31, 0x4d, 0x3a, 0x07, 0x32, 0x89,
	0xfa, 0x81, 0x0a, 0x31, 0xe8, 0xcb, 0x27, 0x8c, 0xa9, 0x8c, 0xdd, 0x10, 0x60, 0x20, 0x27, 0xc3,
	0xbb, 0x0c, 0x33, 0x0c, 0xf9, 0x3e, 0x54, 0xa2, 0xd0, 0x61, 0x5d, 0xe6, 0x35, 0xfc, 0x4a, 0x14,
	0x72, 0x07, 0xea, 0x81, 0x8a, 0x09, 0x63, 0x72, 0x2a, 0xc6, 0xfc, 0x96, 0xfc, 0x04, 0xec, 0xc7,
	0x68, 0x44, 0x98, 0x3a, 0xd5, 0x2e, 0xf3, 0x9a, 0xa7, 0xed, 0x9e, 0x61, 0xf7, 0x2e, 0x0a, 0xf6,
	0x2d, 0x92, 0x0c, 0x25, 0x49, 0x7f, 0xdd, 0x71, 0x6f, 0xa0, 0x59, 0xac, 0x5c, 0x8d, 0x64, 0x34,
	0xde, 0x32, 0x73, 0x0c, 0x35, 0xf3, 0x26, 0x33, 0xf2, 0x17, 0xab, 0xac, 0xb8, 0xef, 0x0c, 0x5a,
	0x05, 0xeb, 0x7a, 0x86, 0x41, 0x46, 0x5b, 0x60, 0x87, 0x60, 0xab, 0x8c, 0x92, 0xac, 0xa0, 0x55,
	0xbd, 0x86, 0xbf, 0x56, 0xbc, 0x0d, 0x35, 0x4c, 0x53, 0x55, 0x3e, 0xb8, 0xe1, 0x97, 0x82, 0x1f,
	0xc1, 0x1e, 0xce, 0x30, 0xb8, 0x27, 0x99, 0xd2, 0x20, 0x1a, 0xa3, 0xb3, 0xd3, 0x65, 0x5e, 0xd5,
	0xdf, 0x34, 0xb9, 0x0b, 0xad, 0xd2, 0x50, 0x89, 0x29, 0xd5, 0x4c, 0x69, 0xc3, 0xe3, 0x1d, 0xd8,
	0x4d, 0x31, 0x98, 0x9a, 0xdc, 0x36, 0xf9, 0x8f, 0xfe, 0x3d, 0xb0, 0xfe, 0xef, 0x81, 0x97, 0xe7,
	0xf3, 0xa5, 0xb0, 0x16, 0x4b, 0x61, 0xad, 0x96, 0x82, 0x3d, 0x6b, 0xc1, 0x5e, 0xb5, 0x60, 0x6f,
	0x5a, 0xb0, 0xb9, 0x16, 0xec, 0x43, 0x0b, 0xf6, 0xa9, 0x85, 0xb5, 0xd2, 0x82, 0xbd, 0xe4, 0xc2,
	0x9a, 0xe7, 0xc2, 0x5a, 0xe4, 0xc2, 0x7a, 0xb0, 0xcd, 0x77, 0x9e, 0x7d, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x0b, 0xb8, 0x00, 0xa2, 0xfb, 0x01, 0x00, 0x00,
}

func (this *TaskQueued) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskQueued)
	if !ok {
		that2, ok := that.(TaskQueued)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if !this.Filter.Equal(that1.Filter) {
		return false
	}
	return true
}
func (this *TaskClaimed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskClaimed)
	if !ok {
		that2, ok := that.(TaskClaimed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Agent.Equal(that1.Agent) {
		return false
	}
	return true
}
func (this *TaskExecuted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskExecuted)
	if !ok {
		that2, ok := that.(TaskExecuted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Output) != len(that1.Output) {
		return false
	}
	for i := range this.Output {
		if this.Output[i] != that1.Output[i] {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	if this.ExecStartTime != that1.ExecStartTime {
		return false
	}
	if this.ExecStopTime != that1.ExecStopTime {
		return false
	}
	if this.RecvTime != that1.RecvTime {
		return false
	}
	if !this.Agent.Equal(that1.Agent) {
		return false
	}
	return true
}
func (this *TaskQueued) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&events.TaskQueued{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	if this.Filter != nil {
		s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskClaimed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&events.TaskClaimed{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Agent != nil {
		s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskExecuted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&events.TaskExecuted{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "ExecStartTime: "+fmt.Sprintf("%#v", this.ExecStartTime)+",\n")
	s = append(s, "ExecStopTime: "+fmt.Sprintf("%#v", this.ExecStopTime)+",\n")
	s = append(s, "RecvTime: "+fmt.Sprintf("%#v", this.RecvTime)+",\n")
	if this.Agent != nil {
		s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTask(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TaskQueued) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskQueued) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Filter != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Filter.Size()))
		n1, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *TaskClaimed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskClaimed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Agent != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Agent.Size()))
		n2, err := m.Agent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *TaskExecuted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskExecuted) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Output) > 0 {
		for _, s := range m.Output {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.ExecStartTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ExecStartTime))
	}
	if m.ExecStopTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ExecStopTime))
	}
	if m.RecvTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.RecvTime))
	}
	if m.Agent != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Agent.Size()))
		n3, err := m.Agent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskQueued) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *TaskClaimed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Agent != nil {
		l = m.Agent.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *TaskExecuted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if len(m.Output) > 0 {
		for _, s := range m.Output {
			l = len(s)
			n += 1 + l + sovTask(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.ExecStartTime != 0 {
		n += 1 + sovTask(uint64(m.ExecStartTime))
	}
	if m.ExecStopTime != 0 {
		n += 1 + sovTask(uint64(m.ExecStopTime))
	}
	if m.RecvTime != 0 {
		n += 1 + sovTask(uint64(m.RecvTime))
	}
	if m.Agent != nil {
		l = m.Agent.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func sovTask(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TaskQueued) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskQueued{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Filter:` + strings.Replace(fmt.Sprintf("%v", this.Filter), "AgentMetadata", "codec.AgentMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskClaimed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskClaimed{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Agent:` + strings.Replace(fmt.Sprintf("%v", this.Agent), "AgentMetadata", "codec.AgentMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskExecuted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskExecuted{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Output:` + fmt.Sprintf("%v", this.Output) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`ExecStartTime:` + fmt.Sprintf("%v", this.ExecStartTime) + `,`,
		`ExecStopTime:` + fmt.Sprintf("%v", this.ExecStopTime) + `,`,
		`RecvTime:` + fmt.Sprintf("%v", this.RecvTime) + `,`,
		`Agent:` + strings.Replace(fmt.Sprintf("%v", this.Agent), "AgentMetadata", "codec.AgentMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTask(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TaskQueued) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskQueued: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskQueued: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &codec.AgentMetadata{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskClaimed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskClaimed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskClaimed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Agent == nil {
				m.Agent = &codec.AgentMetadata{}
			}
			if err := m.Agent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskExecuted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskExecuted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskExecuted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = append(m.Output, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStartTime", wireType)
			}
			m.ExecStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecStartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStopTime", wireType)
			}
			m.ExecStopTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecStopTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvTime", wireType)
			}
			m.RecvTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecvTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Agent == nil {
				m.Agent = &codec.AgentMetadata{}
			}
			if err := m.Agent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTask(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTask
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask   = fmt.Errorf("proto: integer overflow")
)
