syntax = "proto3";

package jobs;

/*
 * Golang Options
 */

// Install: go get -u github.com/gogo/protobuf@v1.3.1
import "gogoproto/gogo.proto";

// Tests
option (gogoproto.equal_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;

// Performance
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;

// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

/*
 * gRPC Gateway Options
 */

// Install: go get -u github.com/gogo/googleapis@v1.3.0
import "google/api/annotations.proto";

/*
 * TODO: @cictrone
 */
service Jobs {
    /*
     * TODO: @cictrone
     */
    rpc Fetch(FetchRequest) returns (FetchResponse) {
        option (google.api.http) = {
            get: "/api/v1/jobs/{id}"
        };
    }

    /*
     * TODO: @cictrone
     */
    rpc Find(FindRequest) returns (FindResponse) {
        option (google.api.http) = {
            get: "/api/v1/jobs/find"
        };
    }

    /*
     * TODO: @cictrone
     */
    rpc Create(CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/api/v1/jobs/create"
            body: "*"
        };
    }

    /*
     * TODO: @cictrone
     */
    rpc Queue(QueueRequest) returns (QueueResponse) {
        option (google.api.http) = {
            post: "/api/v1/jobs/queue"
            body: "*"
        };
    }

}

message FetchRequest {
    int64 id = 1;
}
message FetchResponse {}

message FindRequest {
    string filter = 1;
}
message FindResponse {}


message CreateRequest {}
message CreateResponse {}

message QueueRequest {}
message QueueResponse {}
