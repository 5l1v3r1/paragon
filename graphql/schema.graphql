directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

scalar Time

type Target @goModel(model: "github.com/kcarretto/paragon/ent.Target") {
  id: ID
  name: String
  primaryIP: String
  machineUUID: String
  publicIP: String
  primaryMAC: String
  hostname: String
  lastSeen: Time

  tasks: [Task]
  tags: [Tag]
  credentials: [Credential]
}

type Tag @goModel(model: "github.com/kcarretto/paragon/ent.Tag") {
  id: ID
  name: String

  tasks: [Task]
  targets: [Target]
  jobs: [Job]
}

type Task @goModel(model: "github.com/kcarretto/paragon/ent.Task") {
  id: ID
  queueTime: Time
  claimTime: Time
  execStartTime: Time
  execStopTime: Time

  content: String
  output: [String]
  error: String
  sessionID: String

  job: Job
}

type Job @goModel(model: "github.com/kcarretto/paragon/ent.Job") {
  id: ID
  name: String
  creationTime: Time
  content: String

  tasks: [Task]
  tags: [Tag]
  next: Job
  prev: Job
}

type Credential @goModel(model: "github.com/kcarretto/paragon/ent.Credential") {
  id: ID
  principal: String
  secret: String
  fails: Int
}

input FailCredentialRequest {
  id: ID!
}

input CreateJobRequest {
  name: String!
  content: String!

  tags: [ID!]
  prev: ID
}

input CreateTagRequest {
  name: String!
}

input ApplyTagRequest {
  tagID: ID!
  entID: ID!
}

input RemoveTagRequest {
  tagID: ID!
  entID: ID!
}

input CreateTargetRequest {
  name: String!
  primaryIP: String!

  tags: [ID!]
}

input SetTargetFieldsRequest {
    id: ID!
    name: String
    machineUUID: String
    primaryIP: String
    publicIP: String
    primaryMAC: String
    hostname: String
}

input DeleteTargetRequest {
  id: ID!
}

input AddCredentialForTargetRequest {
  id: ID!
  principal: String!
  secret: String!
}

type Mutation {
  # Credential Mutations
  failCredential(input: FailCredentialRequest): Boolean!

  # Job Mutations
  createJob(input: CreateJobRequest): ID!

  # Tag Mutations
  createTag(input: CreateTagRequest): ID!
  applyTagToTask(input: ApplyTagRequest): Boolean!
  applyTagToTarget(input: ApplyTagRequest): Boolean!
  applyTagToJob(input: ApplyTagRequest): Boolean!
  removeTagFromTask(input: RemoveTagRequest): Boolean!
  removeTagFromTarget(input: RemoveTagRequest): Boolean!
  removeTagFromJob(input: RemoveTagRequest): Boolean!

  # Target Mutations
  createTarget(input: CreateTargetRequest): ID!
  setTargetFields(input: SetTargetFieldsRequest): Boolean!
  deleteTarget(input: DeleteTargetRequest): Boolean!
  addCredentialForTarget(input: AddCredentialForTargetRequest): Boolean!
}

type Query {
  credential(id: ID!): Credential
  credentials: [Credential]

  job(id: ID!): Job
  jobs: [Job]

  tag(id: ID!): Tag
  tags: [Tag]

  target(id: ID!): Target
  targets: [Target]

  task(id: ID!): Task
  tasks: [Task]
}