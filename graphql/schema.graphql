directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

scalar Time


# Needed for Relay
interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input ConnectionInput {
  # offset
  after: String

  # limit
  first: Int
}
####################################


# Target Types
type Target implements Node @goModel(model: "github.com/kcarretto/paragon/ent.Target") {
  id: ID!
  name: String
  primaryIP: String
  machineUUID: String
  publicIP: String
  primaryMAC: String
  hostname: String
  lastSeen: Time

  tasks(input: ConnectionInput): TaskConnection
  tags(input: ConnectionInput): TagConnection
  credentials(input: ConnectionInput): CredentialConnection
}

type TargetConnection {
  edges: [TargetEdge]
  pageInfo: PageInfo!
}

type TargetEdge {
  cursor: String!
  node: Target
}
####################################


# Tag Types
type Tag implements Node @goModel(model: "github.com/kcarretto/paragon/ent.Tag") {
  id: ID!
  name: String

  tasks(input: ConnectionInput): TaskConnection
  targets(input: ConnectionInput): TargetConnection
  jobs(input: ConnectionInput): JobConnection
}

type TagConnection {
  edges: [TagEdge]
  pageInfo: PageInfo!
}

type TagEdge {
  cursor: String!
  node: Tag
}
####################################


# Task Types
type Task implements Node @goModel(model: "github.com/kcarretto/paragon/ent.Task") {
  id: ID!
  queueTime: Time
  claimTime: Time
  execStartTime: Time
  execStopTime: Time

  content: String
  output: String
  error: String
  sessionID: String

  job: Job
  target: Target
}

type TaskConnection {
  edges: [TaskEdge]
  pageInfo: PageInfo!
}

type TaskEdge {
  cursor: String!
  node: Task
}
####################################


# Job Types
type Job implements Node @goModel(model: "github.com/kcarretto/paragon/ent.Job") {
  id: ID!
  name: String
  creationTime: Time
  content: String

  tasks(input: ConnectionInput): TaskConnection
  tags(input: ConnectionInput): TagConnection
  next: Job
  prev: Job
}

type JobConnection {
  edges: [JobEdge]
  pageInfo: PageInfo!
}

type JobEdge {
  cursor: String!
  node: Job
}
####################################


# Credential Types
type Credential implements Node @goModel(model: "github.com/kcarretto/paragon/ent.Credential") {
  id: ID!
  principal: String
  secret: String
  fails: Int
}

type CredentialConnection {
  edges: [CredentialEdge]
  pageInfo: PageInfo!
}

type CredentialEdge {
  cursor: String!
  node: Credential
}
####################################


input FailCredentialRequest {
  id: ID!
}

input CreateJobRequest {
  name: String!
  content: String!
  sessionID: String

  targets: [ID!]
  tags: [ID!]
  prev: ID
}

input CreateTagRequest {
  name: String!
}

input ApplyTagRequest {
  tagID: ID!
  entID: ID!
}

input RemoveTagRequest {
  tagID: ID!
  entID: ID!
}

input CreateTargetRequest {
  name: String!
  primaryIP: String!

  tags: [ID!]
}

input SetTargetFieldsRequest {
    id: ID!
    name: String
    machineUUID: String
    primaryIP: String
    publicIP: String
    primaryMAC: String
    hostname: String
}

input DeleteTargetRequest {
  id: ID!
}

input AddCredentialForTargetRequest {
  id: ID!
  principal: String!
  secret: String!
}

input ClaimTasksRequest {
  machineUUID: String
  primaryIP: String
  hostname: String
  primaryMAC: String
  sessionID: String
}

input SubmitTaskResultRequest {
  id: ID!
  output: String
  error: String
  execStartTime: Time
  execStopTime: Time
}

type Mutation {
  # Credential Mutations
  failCredential(input: FailCredentialRequest): Credential!

  # Job Mutations
  createJob(input: CreateJobRequest): Job!

  # Tag Mutations
  createTag(input: CreateTagRequest): Tag!
  applyTagToTask(input: ApplyTagRequest): Task!
  applyTagToTarget(input: ApplyTagRequest): Target!
  applyTagToJob(input: ApplyTagRequest): Job!
  removeTagFromTask(input: RemoveTagRequest): Task!
  removeTagFromTarget(input: RemoveTagRequest): Target!
  removeTagFromJob(input: RemoveTagRequest): Job!

  # Target Mutations
  createTarget(input: CreateTargetRequest): Target!
  setTargetFields(input: SetTargetFieldsRequest): Target!
  deleteTarget(input: DeleteTargetRequest): Boolean!
  addCredentialForTarget(input: AddCredentialForTargetRequest): Target!

  # Task Mutations
  claimTasks(input: ClaimTasksRequest): [Task!]
  claimTask(id: ID!): Task
  submitTaskResult(input: SubmitTaskResultRequest): Task!
}

type Query {
  credential(id: ID!): Credential
  credentials(input: ConnectionInput): CredentialConnection

  job(id: ID!): Job
  jobs(input: ConnectionInput): JobConnection

  tag(id: ID!): Tag
  tags(input: ConnectionInput): TagConnection

  target(id: ID!): Target
  targets(input: ConnectionInput): TargetConnection

  task(id: ID!): Task
  tasks(input: ConnectionInput): TaskConnection

  node(id: ID!): Node
}