directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

scalar Time

input Filter {
  offset: Int
  limit: Int
}


type Target @goModel(model: "github.com/kcarretto/paragon/ent.Target") {
  id: ID
  name: String
  primaryIP: String
  machineUUID: String
  publicIP: String
  primaryMAC: String
  hostname: String
  lastSeen: Time

  tasks(input: Filter): [Task]
  tags(input: Filter): [Tag]
  credentials(input: Filter): [Credential]
}


type Tag @goModel(model: "github.com/kcarretto/paragon/ent.Tag") {
  id: ID!
  name: String

  tasks(input: Filter): [Task]
  targets(input: Filter): [Target]
  jobs(input: Filter): [Job]
}


type Task @goModel(model: "github.com/kcarretto/paragon/ent.Task") {
  id: ID!

  lastChangedTime: Time

  queueTime: Time
  claimTime: Time
  execStartTime: Time
  execStopTime: Time

  content: String
  output: String
  error: String
  sessionID: String

  job: Job
  target: Target
}


type Job @goModel(model: "github.com/kcarretto/paragon/ent.Job") {
  id: ID!
  name: String
  creationTime: Time
  content: String

  tasks(input: Filter): [Task]
  tags(input: Filter): [Tag]
  next: Job
  prev: Job
}


type Credential @goModel(model: "github.com/kcarretto/paragon/ent.Credential") {
  id: ID!
  principal: String
  secret: String
  kind: String
  fails: Int
}

type File @goModel(model: "github.com/kcarretto/paragon/ent.File") {
  id: ID!
  name: String
  creationTime: Time
  lastModifiedTime: Time
  size: Int
  hash: String
  contentType: String

  links(input: Filter): [Link]
}

type Link @goModel(model: "github.com/kcarretto/paragon/ent.Link") {
  id: ID!
  alias: String
  expirationTime: Time
  clicks: Int

  file: File
}


input FailCredentialRequest {
  id: ID!
}

input CreateJobRequest {
  name: String!
  content: String!
  sessionID: String

  targets: [ID!]
  tags: [ID!]
  prev: ID
}

input CreateTagRequest {
  name: String!
}

input ApplyTagRequest {
  tagID: ID!
  entID: ID!
}

input RemoveTagRequest {
  tagID: ID!
  entID: ID!
}

input CreateTargetRequest {
  name: String!
  primaryIP: String!

  tags: [ID!]
}

input SetTargetFieldsRequest {
    id: ID!
    name: String
    machineUUID: String
    primaryIP: String
    publicIP: String
    primaryMAC: String
    hostname: String
}

input DeleteTargetRequest {
  id: ID!
}

input AddCredentialForTargetRequest {
  id: ID!
  principal: String!
  secret: String!
  kind: String
}

input ClaimTasksRequest {
  machineUUID: String
  primaryIP: String
  hostname: String
  primaryMAC: String
  sessionID: String
}

input SubmitTaskResultRequest {
  id: ID!
  output: String
  error: String
  execStartTime: Time
  execStopTime: Time
}

input CreateLinkRequest {
    alias: String!
    ExpirationTime: Time
    clicks: Int
    file: ID!
}

input SetLinkFieldsRequest {
    id: ID!
    alias: String
    ExpirationTime: Time
    clicks: Int
}

type Mutation {
  # Credential Mutations
  failCredential(input: FailCredentialRequest): Credential!

  # Job Mutations
  createJob(input: CreateJobRequest): Job!

  # Tag Mutations
  createTag(input: CreateTagRequest): Tag!
  applyTagToTask(input: ApplyTagRequest): Task!
  applyTagToTarget(input: ApplyTagRequest): Target!
  applyTagToJob(input: ApplyTagRequest): Job!
  removeTagFromTask(input: RemoveTagRequest): Task!
  removeTagFromTarget(input: RemoveTagRequest): Target!
  removeTagFromJob(input: RemoveTagRequest): Job!

  # Target Mutations
  createTarget(input: CreateTargetRequest): Target!
  setTargetFields(input: SetTargetFieldsRequest): Target!
  deleteTarget(input: DeleteTargetRequest): Boolean!
  addCredentialForTarget(input: AddCredentialForTargetRequest): Target!

  # Task Mutations
  claimTasks(input: ClaimTasksRequest): [Task!]
  claimTask(id: ID!): Task
  submitTaskResult(input: SubmitTaskResultRequest): Task!

  # Link Mutations
  createLink(input: CreateLinkRequest): Link!
  setLinkFields(input: SetLinkFieldsRequest): Link!

}

type Query {
  link(id: ID!): Link
  links(input: Filter): [Link]

  file(id: ID!): File
  files(input: Filter): [File]

  credential(id: ID!): Credential
  credentials(input: Filter): [Credential]

  job(id: ID!): Job
  jobs(input: Filter): [Job]

  tag(id: ID!): Tag
  tags(input: Filter): [Tag]

  target(id: ID!): Target
  targets(input: Filter): [Target]

  task(id: ID!): Task
  tasks(input: Filter): [Task]
}