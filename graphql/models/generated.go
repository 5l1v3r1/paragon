// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"time"

	"github.com/kcarretto/paragon/ent"
)

type AddCredentialForTargetRequest struct {
	ID        int    `json:"id"`
	Principal string `json:"principal"`
	Secret    string `json:"secret"`
}

type ApplyTagRequest struct {
	TagID int `json:"tagID"`
	EntID int `json:"entID"`
}

type ClaimTasksRequest struct {
	MachineUUID *string `json:"machineUUID"`
	PrimaryIP   *string `json:"primaryIP"`
	Hostname    *string `json:"hostname"`
	PrimaryMac  *string `json:"primaryMAC"`
	SessionID   *string `json:"sessionID"`
}

type ConnectionInput struct {
	After *string `json:"after"`
	First *int    `json:"first"`
}

type CreateJobRequest struct {
	Name      string  `json:"name"`
	Content   string  `json:"content"`
	SessionID *string `json:"sessionID"`
	Targets   []int   `json:"targets"`
	Tags      []int   `json:"tags"`
	Prev      *int    `json:"prev"`
}

type CreateTagRequest struct {
	Name string `json:"name"`
}

type CreateTargetRequest struct {
	Name      string `json:"name"`
	PrimaryIP string `json:"primaryIP"`
	Tags      []int  `json:"tags"`
}

type CredentialConnection struct {
	Edges    []*CredentialEdge `json:"edges"`
	PageInfo *PageInfo         `json:"pageInfo"`
}

type CredentialEdge struct {
	Cursor string          `json:"cursor"`
	Node   *ent.Credential `json:"node"`
}

type DeleteTargetRequest struct {
	ID int `json:"id"`
}

type FailCredentialRequest struct {
	ID int `json:"id"`
}

type JobConnection struct {
	Edges    []*JobEdge `json:"edges"`
	PageInfo *PageInfo  `json:"pageInfo"`
}

type JobEdge struct {
	Cursor string   `json:"cursor"`
	Node   *ent.Job `json:"node"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type RemoveTagRequest struct {
	TagID int `json:"tagID"`
	EntID int `json:"entID"`
}

type SetTargetFieldsRequest struct {
	ID          int     `json:"id"`
	Name        *string `json:"name"`
	MachineUUID *string `json:"machineUUID"`
	PrimaryIP   *string `json:"primaryIP"`
	PublicIP    *string `json:"publicIP"`
	PrimaryMac  *string `json:"primaryMAC"`
	Hostname    *string `json:"hostname"`
}

type SubmitTaskResultRequest struct {
	ID            int        `json:"id"`
	Output        *string    `json:"output"`
	Error         *string    `json:"error"`
	ExecStartTime *time.Time `json:"execStartTime"`
	ExecStopTime  *time.Time `json:"execStopTime"`
}

type TagConnection struct {
	Edges    []*TagEdge `json:"edges"`
	PageInfo *PageInfo  `json:"pageInfo"`
}

type TagEdge struct {
	Cursor string   `json:"cursor"`
	Node   *ent.Tag `json:"node"`
}

type TargetConnection struct {
	Edges    []*TargetEdge `json:"edges"`
	PageInfo *PageInfo     `json:"pageInfo"`
}

type TargetEdge struct {
	Cursor string      `json:"cursor"`
	Node   *ent.Target `json:"node"`
}

type TaskConnection struct {
	Edges    []*TaskEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type TaskEdge struct {
	Cursor string    `json:"cursor"`
	Node   *ent.Task `json:"node"`
}
