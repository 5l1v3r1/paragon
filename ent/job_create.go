// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/task"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	Name       *string
	Parameters *string
	tasks      map[int]struct{}
	tags       map[int]struct{}
	template   map[int]struct{}
}

// SetName sets the Name field.
func (jc *JobCreate) SetName(s string) *JobCreate {
	jc.Name = &s
	return jc
}

// SetParameters sets the Parameters field.
func (jc *JobCreate) SetParameters(s string) *JobCreate {
	jc.Parameters = &s
	return jc
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (jc *JobCreate) AddTaskIDs(ids ...int) *JobCreate {
	if jc.tasks == nil {
		jc.tasks = make(map[int]struct{})
	}
	for i := range ids {
		jc.tasks[ids[i]] = struct{}{}
	}
	return jc
}

// AddTasks adds the tasks edges to Task.
func (jc *JobCreate) AddTasks(t ...*Task) *JobCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return jc.AddTaskIDs(ids...)
}

// AddTagIDs adds the tags edge to Tag by ids.
func (jc *JobCreate) AddTagIDs(ids ...int) *JobCreate {
	if jc.tags == nil {
		jc.tags = make(map[int]struct{})
	}
	for i := range ids {
		jc.tags[ids[i]] = struct{}{}
	}
	return jc
}

// AddTags adds the tags edges to Tag.
func (jc *JobCreate) AddTags(t ...*Tag) *JobCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return jc.AddTagIDs(ids...)
}

// SetTemplateID sets the template edge to JobTemplate by id.
func (jc *JobCreate) SetTemplateID(id int) *JobCreate {
	if jc.template == nil {
		jc.template = make(map[int]struct{})
	}
	jc.template[id] = struct{}{}
	return jc
}

// SetTemplate sets the template edge to JobTemplate.
func (jc *JobCreate) SetTemplate(j *JobTemplate) *JobCreate {
	return jc.SetTemplateID(j.ID)
}

// Save creates the Job in the database.
func (jc *JobCreate) Save(ctx context.Context) (*Job, error) {
	if jc.Name == nil {
		return nil, errors.New("ent: missing required field \"Name\"")
	}
	if err := job.NameValidator(*jc.Name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
	}
	if jc.Parameters == nil {
		return nil, errors.New("ent: missing required field \"Parameters\"")
	}
	if len(jc.template) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"template\"")
	}
	if jc.template == nil {
		return nil, errors.New("ent: missing required edge \"template\"")
	}
	return jc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (jc *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	var (
		res sql.Result
		j   = &Job{config: jc.config}
	)
	tx, err := jc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	builder := sql.Dialect(jc.driver.Dialect()).
		Insert(job.Table).
		Default()
	if value := jc.Name; value != nil {
		builder.Set(job.FieldName, *value)
		j.Name = *value
	}
	if value := jc.Parameters; value != nil {
		builder.Set(job.FieldParameters, *value)
		j.Parameters = *value
	}
	query, args := builder.Query()
	if err := tx.Exec(ctx, query, args, &res); err != nil {
		return nil, rollback(tx, err)
	}
	id, err := res.LastInsertId()
	if err != nil {
		return nil, rollback(tx, err)
	}
	j.ID = int(id)
	if len(jc.tasks) > 0 {
		p := sql.P()
		for eid := range jc.tasks {
			p.Or().EQ(task.FieldID, eid)
		}
		query, args := sql.Update(job.TasksTable).
			Set(job.TasksColumn, id).
			Where(sql.And(p, sql.IsNull(job.TasksColumn))).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
		affected, err := res.RowsAffected()
		if err != nil {
			return nil, rollback(tx, err)
		}
		if int(affected) < len(jc.tasks) {
			return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"tasks\" %v already connected to a different \"Job\"", keys(jc.tasks))})
		}
	}
	if len(jc.tags) > 0 {
		for eid := range jc.tags {

			query, args := sql.Insert(job.TagsTable).
				Columns(job.TagsPrimaryKey[0], job.TagsPrimaryKey[1]).
				Values(id, eid).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if len(jc.template) > 0 {
		for eid := range jc.template {
			query, args := sql.Update(job.TemplateTable).
				Set(job.TemplateColumn, eid).
				Where(sql.EQ(job.FieldID, id)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return j, nil
}
