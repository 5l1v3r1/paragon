// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/jobtemplate"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/tag"
)

// JobTemplateQuery is the builder for querying JobTemplate entities.
type JobTemplateQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.JobTemplate
	// intermediate queries.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (jtq *JobTemplateQuery) Where(ps ...predicate.JobTemplate) *JobTemplateQuery {
	jtq.predicates = append(jtq.predicates, ps...)
	return jtq
}

// Limit adds a limit step to the query.
func (jtq *JobTemplateQuery) Limit(limit int) *JobTemplateQuery {
	jtq.limit = &limit
	return jtq
}

// Offset adds an offset step to the query.
func (jtq *JobTemplateQuery) Offset(offset int) *JobTemplateQuery {
	jtq.offset = &offset
	return jtq
}

// Order adds an order step to the query.
func (jtq *JobTemplateQuery) Order(o ...Order) *JobTemplateQuery {
	jtq.order = append(jtq.order, o...)
	return jtq
}

// QueryJobs chains the current query on the jobs edge.
func (jtq *JobTemplateQuery) QueryJobs() *JobQuery {
	query := &JobQuery{config: jtq.config}
	t1 := sql.Table(job.Table)
	t2 := jtq.sqlQuery()
	t2.Select(t2.C(jobtemplate.FieldID))
	query.sql = sql.Select().
		From(t1).
		Join(t2).
		On(t1.C(jobtemplate.JobsColumn), t2.C(jobtemplate.FieldID))
	return query
}

// QueryTags chains the current query on the tags edge.
func (jtq *JobTemplateQuery) QueryTags() *TagQuery {
	query := &TagQuery{config: jtq.config}
	t1 := sql.Table(tag.Table)
	t2 := jtq.sqlQuery()
	t2.Select(t2.C(jobtemplate.FieldID))
	t3 := sql.Table(jobtemplate.TagsTable)
	t4 := sql.Select(t3.C(jobtemplate.TagsPrimaryKey[1])).
		From(t3).
		Join(t2).
		On(t3.C(jobtemplate.TagsPrimaryKey[0]), t2.C(jobtemplate.FieldID))
	query.sql = sql.Select().
		From(t1).
		Join(t4).
		On(t1.C(tag.FieldID), t4.C(jobtemplate.TagsPrimaryKey[1]))
	return query
}

// First returns the first JobTemplate entity in the query. Returns *ErrNotFound when no jobtemplate was found.
func (jtq *JobTemplateQuery) First(ctx context.Context) (*JobTemplate, error) {
	jts, err := jtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(jts) == 0 {
		return nil, &ErrNotFound{jobtemplate.Label}
	}
	return jts[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jtq *JobTemplateQuery) FirstX(ctx context.Context) *JobTemplate {
	jt, err := jtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return jt
}

// FirstID returns the first JobTemplate id in the query. Returns *ErrNotFound when no id was found.
func (jtq *JobTemplateQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &ErrNotFound{jobtemplate.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (jtq *JobTemplateQuery) FirstXID(ctx context.Context) int {
	id, err := jtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only JobTemplate entity in the query, returns an error if not exactly one entity was returned.
func (jtq *JobTemplateQuery) Only(ctx context.Context) (*JobTemplate, error) {
	jts, err := jtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(jts) {
	case 1:
		return jts[0], nil
	case 0:
		return nil, &ErrNotFound{jobtemplate.Label}
	default:
		return nil, &ErrNotSingular{jobtemplate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jtq *JobTemplateQuery) OnlyX(ctx context.Context) *JobTemplate {
	jt, err := jtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return jt
}

// OnlyID returns the only JobTemplate id in the query, returns an error if not exactly one id was returned.
func (jtq *JobTemplateQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &ErrNotFound{jobtemplate.Label}
	default:
		err = &ErrNotSingular{jobtemplate.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (jtq *JobTemplateQuery) OnlyXID(ctx context.Context) int {
	id, err := jtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobTemplates.
func (jtq *JobTemplateQuery) All(ctx context.Context) ([]*JobTemplate, error) {
	return jtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (jtq *JobTemplateQuery) AllX(ctx context.Context) []*JobTemplate {
	jts, err := jtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return jts
}

// IDs executes the query and returns a list of JobTemplate ids.
func (jtq *JobTemplateQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := jtq.Select(jobtemplate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jtq *JobTemplateQuery) IDsX(ctx context.Context) []int {
	ids, err := jtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jtq *JobTemplateQuery) Count(ctx context.Context) (int, error) {
	return jtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (jtq *JobTemplateQuery) CountX(ctx context.Context) int {
	count, err := jtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jtq *JobTemplateQuery) Exist(ctx context.Context) (bool, error) {
	return jtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (jtq *JobTemplateQuery) ExistX(ctx context.Context) bool {
	exist, err := jtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jtq *JobTemplateQuery) Clone() *JobTemplateQuery {
	return &JobTemplateQuery{
		config:     jtq.config,
		limit:      jtq.limit,
		offset:     jtq.offset,
		order:      append([]Order{}, jtq.order...),
		unique:     append([]string{}, jtq.unique...),
		predicates: append([]predicate.JobTemplate{}, jtq.predicates...),
		// clone intermediate queries.
		sql: jtq.sql.Clone(),
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobTemplate.Query().
//		GroupBy(jobtemplate.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (jtq *JobTemplateQuery) GroupBy(field string, fields ...string) *JobTemplateGroupBy {
	group := &JobTemplateGroupBy{config: jtq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = jtq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//	}
//
//	client.JobTemplate.Query().
//		Select(jobtemplate.FieldName).
//		Scan(ctx, &v)
//
func (jtq *JobTemplateQuery) Select(field string, fields ...string) *JobTemplateSelect {
	selector := &JobTemplateSelect{config: jtq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = jtq.sqlQuery()
	return selector
}

func (jtq *JobTemplateQuery) sqlAll(ctx context.Context) ([]*JobTemplate, error) {
	rows := &sql.Rows{}
	selector := jtq.sqlQuery()
	if unique := jtq.unique; len(unique) == 0 {
		selector.Distinct()
	}
	query, args := selector.Query()
	if err := jtq.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var jts JobTemplates
	if err := jts.FromRows(rows); err != nil {
		return nil, err
	}
	jts.config(jtq.config)
	return jts, nil
}

func (jtq *JobTemplateQuery) sqlCount(ctx context.Context) (int, error) {
	rows := &sql.Rows{}
	selector := jtq.sqlQuery()
	unique := []string{jobtemplate.FieldID}
	if len(jtq.unique) > 0 {
		unique = jtq.unique
	}
	selector.Count(sql.Distinct(selector.Columns(unique...)...))
	query, args := selector.Query()
	if err := jtq.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	if !rows.Next() {
		return 0, errors.New("ent: no rows found")
	}
	var n int
	if err := rows.Scan(&n); err != nil {
		return 0, fmt.Errorf("ent: failed reading count: %v", err)
	}
	return n, nil
}

func (jtq *JobTemplateQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := jtq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (jtq *JobTemplateQuery) sqlQuery() *sql.Selector {
	t1 := sql.Table(jobtemplate.Table)
	selector := sql.Select(t1.Columns(jobtemplate.Columns...)...).From(t1)
	if jtq.sql != nil {
		selector = jtq.sql
		selector.Select(selector.Columns(jobtemplate.Columns...)...)
	}
	for _, p := range jtq.predicates {
		p(selector)
	}
	for _, p := range jtq.order {
		p(selector)
	}
	if offset := jtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// JobTemplateGroupBy is the builder for group-by JobTemplate entities.
type JobTemplateGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate queries.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jtgb *JobTemplateGroupBy) Aggregate(fns ...Aggregate) *JobTemplateGroupBy {
	jtgb.fns = append(jtgb.fns, fns...)
	return jtgb
}

// Scan applies the group-by query and scan the result into the given value.
func (jtgb *JobTemplateGroupBy) Scan(ctx context.Context, v interface{}) error {
	return jtgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (jtgb *JobTemplateGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := jtgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (jtgb *JobTemplateGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(jtgb.fields) > 1 {
		return nil, errors.New("ent: JobTemplateGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := jtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (jtgb *JobTemplateGroupBy) StringsX(ctx context.Context) []string {
	v, err := jtgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (jtgb *JobTemplateGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(jtgb.fields) > 1 {
		return nil, errors.New("ent: JobTemplateGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := jtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (jtgb *JobTemplateGroupBy) IntsX(ctx context.Context) []int {
	v, err := jtgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (jtgb *JobTemplateGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(jtgb.fields) > 1 {
		return nil, errors.New("ent: JobTemplateGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := jtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (jtgb *JobTemplateGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := jtgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (jtgb *JobTemplateGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(jtgb.fields) > 1 {
		return nil, errors.New("ent: JobTemplateGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := jtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (jtgb *JobTemplateGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := jtgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (jtgb *JobTemplateGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := jtgb.sqlQuery().Query()
	if err := jtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (jtgb *JobTemplateGroupBy) sqlQuery() *sql.Selector {
	selector := jtgb.sql
	columns := make([]string, 0, len(jtgb.fields)+len(jtgb.fns))
	columns = append(columns, jtgb.fields...)
	for _, fn := range jtgb.fns {
		columns = append(columns, fn.SQL(selector))
	}
	return selector.Select(columns...).GroupBy(jtgb.fields...)
}

// JobTemplateSelect is the builder for select fields of JobTemplate entities.
type JobTemplateSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (jts *JobTemplateSelect) Scan(ctx context.Context, v interface{}) error {
	return jts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (jts *JobTemplateSelect) ScanX(ctx context.Context, v interface{}) {
	if err := jts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (jts *JobTemplateSelect) Strings(ctx context.Context) ([]string, error) {
	if len(jts.fields) > 1 {
		return nil, errors.New("ent: JobTemplateSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := jts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (jts *JobTemplateSelect) StringsX(ctx context.Context) []string {
	v, err := jts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (jts *JobTemplateSelect) Ints(ctx context.Context) ([]int, error) {
	if len(jts.fields) > 1 {
		return nil, errors.New("ent: JobTemplateSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := jts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (jts *JobTemplateSelect) IntsX(ctx context.Context) []int {
	v, err := jts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (jts *JobTemplateSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(jts.fields) > 1 {
		return nil, errors.New("ent: JobTemplateSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := jts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (jts *JobTemplateSelect) Float64sX(ctx context.Context) []float64 {
	v, err := jts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (jts *JobTemplateSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(jts.fields) > 1 {
		return nil, errors.New("ent: JobTemplateSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := jts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (jts *JobTemplateSelect) BoolsX(ctx context.Context) []bool {
	v, err := jts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (jts *JobTemplateSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := jts.sqlQuery().Query()
	if err := jts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (jts *JobTemplateSelect) sqlQuery() sql.Querier {
	view := "jobtemplate_view"
	return sql.Select(jts.fields...).From(jts.sql.As(view))
}
