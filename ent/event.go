// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/event"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreationTime holds the value of the "CreationTime" field.
	CreationTime time.Time `json:"CreationTime,omitempty"`
	// Kind holds the value of the "Kind" field.
	Kind event.Kind `json:"Kind,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},
		&sql.NullTime{},
		&sql.NullString{},
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(values ...interface{}) error {
	if m, n := len(values), len(event.Columns); m != n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field CreationTime", values[0])
	} else if value.Valid {
		e.CreationTime = value.Time
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Kind", values[1])
	} else if value.Valid {
		e.Kind = event.Kind(value.String)
	}
	return nil
}

// QueryJob queries the job edge of the Event.
func (e *Event) QueryJob() *JobQuery {
	return (&EventClient{e.config}).QueryJob(e)
}

// QueryFile queries the file edge of the Event.
func (e *Event) QueryFile() *FileQuery {
	return (&EventClient{e.config}).QueryFile(e)
}

// QueryCredential queries the credential edge of the Event.
func (e *Event) QueryCredential() *CredentialQuery {
	return (&EventClient{e.config}).QueryCredential(e)
}

// QueryLink queries the link edge of the Event.
func (e *Event) QueryLink() *LinkQuery {
	return (&EventClient{e.config}).QueryLink(e)
}

// QueryTag queries the tag edge of the Event.
func (e *Event) QueryTag() *TagQuery {
	return (&EventClient{e.config}).QueryTag(e)
}

// QueryTarget queries the target edge of the Event.
func (e *Event) QueryTarget() *TargetQuery {
	return (&EventClient{e.config}).QueryTarget(e)
}

// QueryTask queries the task edge of the Event.
func (e *Event) QueryTask() *TaskQuery {
	return (&EventClient{e.config}).QueryTask(e)
}

// QueryUser queries the user edge of the Event.
func (e *Event) QueryUser() *UserQuery {
	return (&EventClient{e.config}).QueryUser(e)
}

// QueryEvent queries the event edge of the Event.
func (e *Event) QueryEvent() *EventQuery {
	return (&EventClient{e.config}).QueryEvent(e)
}

// QueryService queries the service edge of the Event.
func (e *Event) QueryService() *ServiceQuery {
	return (&EventClient{e.config}).QueryService(e)
}

// QueryLikers queries the likers edge of the Event.
func (e *Event) QueryLikers() *UserQuery {
	return (&EventClient{e.config}).QueryLikers(e)
}

// QueryOwner queries the owner edge of the Event.
func (e *Event) QueryOwner() *UserQuery {
	return (&EventClient{e.config}).QueryOwner(e)
}

// QuerySvcOwner queries the svcOwner edge of the Event.
func (e *Event) QuerySvcOwner() *ServiceQuery {
	return (&EventClient{e.config}).QuerySvcOwner(e)
}

// Update returns a builder for updating this Event.
// Note that, you need to call Event.Unwrap() before calling this method, if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", CreationTime=")
	builder.WriteString(e.CreationTime.Format(time.ANSIC))
	builder.WriteString(", Kind=")
	builder.WriteString(fmt.Sprintf("%v", e.Kind))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
