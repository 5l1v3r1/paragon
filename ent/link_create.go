// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kcarretto/paragon/ent/file"
	"github.com/kcarretto/paragon/ent/link"
)

// LinkCreate is the builder for creating a Link entity.
type LinkCreate struct {
	config
	Alias          *string
	ExpirationTime *time.Time
	Clicks         *int
	file           map[int]struct{}
}

// SetAlias sets the Alias field.
func (lc *LinkCreate) SetAlias(s string) *LinkCreate {
	lc.Alias = &s
	return lc
}

// SetExpirationTime sets the ExpirationTime field.
func (lc *LinkCreate) SetExpirationTime(t time.Time) *LinkCreate {
	lc.ExpirationTime = &t
	return lc
}

// SetNillableExpirationTime sets the ExpirationTime field if the given value is not nil.
func (lc *LinkCreate) SetNillableExpirationTime(t *time.Time) *LinkCreate {
	if t != nil {
		lc.SetExpirationTime(*t)
	}
	return lc
}

// SetClicks sets the Clicks field.
func (lc *LinkCreate) SetClicks(i int) *LinkCreate {
	lc.Clicks = &i
	return lc
}

// SetNillableClicks sets the Clicks field if the given value is not nil.
func (lc *LinkCreate) SetNillableClicks(i *int) *LinkCreate {
	if i != nil {
		lc.SetClicks(*i)
	}
	return lc
}

// SetFileID sets the file edge to File by id.
func (lc *LinkCreate) SetFileID(id int) *LinkCreate {
	if lc.file == nil {
		lc.file = make(map[int]struct{})
	}
	lc.file[id] = struct{}{}
	return lc
}

// SetNillableFileID sets the file edge to File by id if the given value is not nil.
func (lc *LinkCreate) SetNillableFileID(id *int) *LinkCreate {
	if id != nil {
		lc = lc.SetFileID(*id)
	}
	return lc
}

// SetFile sets the file edge to File.
func (lc *LinkCreate) SetFile(f *File) *LinkCreate {
	return lc.SetFileID(f.ID)
}

// Save creates the Link in the database.
func (lc *LinkCreate) Save(ctx context.Context) (*Link, error) {
	if lc.Alias == nil {
		return nil, errors.New("ent: missing required field \"Alias\"")
	}
	if err := link.AliasValidator(*lc.Alias); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"Alias\": %v", err)
	}
	if lc.Clicks == nil {
		v := link.DefaultClicks
		lc.Clicks = &v
	}
	if err := link.ClicksValidator(*lc.Clicks); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"Clicks\": %v", err)
	}
	if len(lc.file) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"file\"")
	}
	return lc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LinkCreate) SaveX(ctx context.Context) *Link {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (lc *LinkCreate) sqlSave(ctx context.Context) (*Link, error) {
	var (
		l    = &Link{config: lc.config}
		spec = &sqlgraph.CreateSpec{
			Table: link.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: link.FieldID,
			},
		}
	)
	if value := lc.Alias; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: link.FieldAlias,
		})
		l.Alias = *value
	}
	if value := lc.ExpirationTime; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: link.FieldExpirationTime,
		})
		l.ExpirationTime = *value
	}
	if value := lc.Clicks; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: link.FieldClicks,
		})
		l.Clicks = *value
	}
	if nodes := lc.file; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   link.FileTable,
			Columns: []string{link.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, lc.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := spec.ID.Value.(int64)
	l.ID = int(id)
	return l, nil
}
