// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/kcarretto/paragon/ent/migrate"

	"github.com/kcarretto/paragon/ent/credential"
	"github.com/kcarretto/paragon/ent/event"
	"github.com/kcarretto/paragon/ent/file"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/link"
	"github.com/kcarretto/paragon/ent/service"
	"github.com/kcarretto/paragon/ent/tag"
	"github.com/kcarretto/paragon/ent/target"
	"github.com/kcarretto/paragon/ent/task"
	"github.com/kcarretto/paragon/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Credential is the client for interacting with the Credential builders.
	Credential *CredentialClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// Job is the client for interacting with the Job builders.
	Job *JobClient
	// Link is the client for interacting with the Link builders.
	Link *LinkClient
	// Service is the client for interacting with the Service builders.
	Service *ServiceClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// Target is the client for interacting with the Target builders.
	Target *TargetClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config:     c,
		Schema:     migrate.NewSchema(c.driver),
		Credential: NewCredentialClient(c),
		Event:      NewEventClient(c),
		File:       NewFileClient(c),
		Job:        NewJobClient(c),
		Link:       NewLinkClient(c),
		Service:    NewServiceClient(c),
		Tag:        NewTagClient(c),
		Target:     NewTargetClient(c),
		Task:       NewTaskClient(c),
		User:       NewUserClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config:     cfg,
		Credential: NewCredentialClient(cfg),
		Event:      NewEventClient(cfg),
		File:       NewFileClient(cfg),
		Job:        NewJobClient(cfg),
		Link:       NewLinkClient(cfg),
		Service:    NewServiceClient(cfg),
		Tag:        NewTagClient(cfg),
		Target:     NewTargetClient(cfg),
		Task:       NewTaskClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Credential.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config:     cfg,
		Schema:     migrate.NewSchema(cfg.driver),
		Credential: NewCredentialClient(cfg),
		Event:      NewEventClient(cfg),
		File:       NewFileClient(cfg),
		Job:        NewJobClient(cfg),
		Link:       NewLinkClient(cfg),
		Service:    NewServiceClient(cfg),
		Tag:        NewTagClient(cfg),
		Target:     NewTargetClient(cfg),
		Task:       NewTaskClient(cfg),
		User:       NewUserClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// CredentialClient is a client for the Credential schema.
type CredentialClient struct {
	config
}

// NewCredentialClient returns a client for the Credential from the given config.
func NewCredentialClient(c config) *CredentialClient {
	return &CredentialClient{config: c}
}

// Create returns a create builder for Credential.
func (c *CredentialClient) Create() *CredentialCreate {
	return &CredentialCreate{config: c.config}
}

// Update returns an update builder for Credential.
func (c *CredentialClient) Update() *CredentialUpdate {
	return &CredentialUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *CredentialClient) UpdateOne(cr *Credential) *CredentialUpdateOne {
	return c.UpdateOneID(cr.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *CredentialClient) UpdateOneID(id int) *CredentialUpdateOne {
	return &CredentialUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Credential.
func (c *CredentialClient) Delete() *CredentialDelete {
	return &CredentialDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CredentialClient) DeleteOne(cr *Credential) *CredentialDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CredentialClient) DeleteOneID(id int) *CredentialDeleteOne {
	return &CredentialDeleteOne{c.Delete().Where(credential.ID(id))}
}

// Create returns a query builder for Credential.
func (c *CredentialClient) Query() *CredentialQuery {
	return &CredentialQuery{config: c.config}
}

// Get returns a Credential entity by its id.
func (c *CredentialClient) Get(ctx context.Context, id int) (*Credential, error) {
	return c.Query().Where(credential.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CredentialClient) GetX(ctx context.Context, id int) *Credential {
	cr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cr
}

// QueryTarget queries the target edge of a Credential.
func (c *CredentialClient) QueryTarget(cr *Credential) *TargetQuery {
	query := &TargetQuery{config: c.config}
	id := cr.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(credential.Table, credential.FieldID, id),
		sqlgraph.To(target.Table, target.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, credential.TargetTable, credential.TargetColumn),
	)
	query.sql = sqlgraph.Neighbors(cr.driver.Dialect(), step)

	return query
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Create returns a create builder for Event.
func (c *EventClient) Create() *EventCreate {
	return &EventCreate{config: c.config}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	return &EventUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	return c.UpdateOneID(e.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id int) *EventUpdateOne {
	return &EventUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	return &EventDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EventClient) DeleteOneID(id int) *EventDeleteOne {
	return &EventDeleteOne{c.Delete().Where(event.ID(id))}
}

// Create returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{config: c.config}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id int) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id int) *Event {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryJob queries the job edge of a Event.
func (c *EventClient) QueryJob(e *Event) *JobQuery {
	query := &JobQuery{config: c.config}
	id := e.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, id),
		sqlgraph.To(job.Table, job.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.JobTable, event.JobColumn),
	)
	query.sql = sqlgraph.Neighbors(e.driver.Dialect(), step)

	return query
}

// QueryFile queries the file edge of a Event.
func (c *EventClient) QueryFile(e *Event) *FileQuery {
	query := &FileQuery{config: c.config}
	id := e.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, id),
		sqlgraph.To(file.Table, file.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.FileTable, event.FileColumn),
	)
	query.sql = sqlgraph.Neighbors(e.driver.Dialect(), step)

	return query
}

// QueryCredential queries the credential edge of a Event.
func (c *EventClient) QueryCredential(e *Event) *CredentialQuery {
	query := &CredentialQuery{config: c.config}
	id := e.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, id),
		sqlgraph.To(credential.Table, credential.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.CredentialTable, event.CredentialColumn),
	)
	query.sql = sqlgraph.Neighbors(e.driver.Dialect(), step)

	return query
}

// QueryLink queries the link edge of a Event.
func (c *EventClient) QueryLink(e *Event) *LinkQuery {
	query := &LinkQuery{config: c.config}
	id := e.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, id),
		sqlgraph.To(link.Table, link.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.LinkTable, event.LinkColumn),
	)
	query.sql = sqlgraph.Neighbors(e.driver.Dialect(), step)

	return query
}

// QueryTag queries the tag edge of a Event.
func (c *EventClient) QueryTag(e *Event) *TagQuery {
	query := &TagQuery{config: c.config}
	id := e.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, id),
		sqlgraph.To(tag.Table, tag.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.TagTable, event.TagColumn),
	)
	query.sql = sqlgraph.Neighbors(e.driver.Dialect(), step)

	return query
}

// QueryTarget queries the target edge of a Event.
func (c *EventClient) QueryTarget(e *Event) *TargetQuery {
	query := &TargetQuery{config: c.config}
	id := e.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, id),
		sqlgraph.To(target.Table, target.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.TargetTable, event.TargetColumn),
	)
	query.sql = sqlgraph.Neighbors(e.driver.Dialect(), step)

	return query
}

// QueryTask queries the task edge of a Event.
func (c *EventClient) QueryTask(e *Event) *TaskQuery {
	query := &TaskQuery{config: c.config}
	id := e.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, id),
		sqlgraph.To(task.Table, task.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.TaskTable, event.TaskColumn),
	)
	query.sql = sqlgraph.Neighbors(e.driver.Dialect(), step)

	return query
}

// QueryUser queries the user edge of a Event.
func (c *EventClient) QueryUser(e *Event) *UserQuery {
	query := &UserQuery{config: c.config}
	id := e.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.UserTable, event.UserColumn),
	)
	query.sql = sqlgraph.Neighbors(e.driver.Dialect(), step)

	return query
}

// QueryEvent queries the event edge of a Event.
func (c *EventClient) QueryEvent(e *Event) *EventQuery {
	query := &EventQuery{config: c.config}
	id := e.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, id),
		sqlgraph.To(event.Table, event.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, event.EventTable, event.EventColumn),
	)
	query.sql = sqlgraph.Neighbors(e.driver.Dialect(), step)

	return query
}

// QueryService queries the service edge of a Event.
func (c *EventClient) QueryService(e *Event) *ServiceQuery {
	query := &ServiceQuery{config: c.config}
	id := e.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, id),
		sqlgraph.To(service.Table, service.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, event.ServiceTable, event.ServiceColumn),
	)
	query.sql = sqlgraph.Neighbors(e.driver.Dialect(), step)

	return query
}

// QueryLikers queries the likers edge of a Event.
func (c *EventClient) QueryLikers(e *Event) *UserQuery {
	query := &UserQuery{config: c.config}
	id := e.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, event.LikersTable, event.LikersColumn),
	)
	query.sql = sqlgraph.Neighbors(e.driver.Dialect(), step)

	return query
}

// QueryOwner queries the owner edge of a Event.
func (c *EventClient) QueryOwner(e *Event) *UserQuery {
	query := &UserQuery{config: c.config}
	id := e.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(event.Table, event.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, event.OwnerTable, event.OwnerColumn),
	)
	query.sql = sqlgraph.Neighbors(e.driver.Dialect(), step)

	return query
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Create returns a create builder for File.
func (c *FileClient) Create() *FileCreate {
	return &FileCreate{config: c.config}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	return &FileUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	return c.UpdateOneID(f.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id int) *FileUpdateOne {
	return &FileUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	return &FileDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileClient) DeleteOneID(id int) *FileDeleteOne {
	return &FileDeleteOne{c.Delete().Where(file.ID(id))}
}

// Create returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{config: c.config}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id int) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id int) *File {
	f, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return f
}

// QueryLinks queries the links edge of a File.
func (c *FileClient) QueryLinks(f *File) *LinkQuery {
	query := &LinkQuery{config: c.config}
	id := f.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(file.Table, file.FieldID, id),
		sqlgraph.To(link.Table, link.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, file.LinksTable, file.LinksColumn),
	)
	query.sql = sqlgraph.Neighbors(f.driver.Dialect(), step)

	return query
}

// JobClient is a client for the Job schema.
type JobClient struct {
	config
}

// NewJobClient returns a client for the Job from the given config.
func NewJobClient(c config) *JobClient {
	return &JobClient{config: c}
}

// Create returns a create builder for Job.
func (c *JobClient) Create() *JobCreate {
	return &JobCreate{config: c.config}
}

// Update returns an update builder for Job.
func (c *JobClient) Update() *JobUpdate {
	return &JobUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobClient) UpdateOne(j *Job) *JobUpdateOne {
	return c.UpdateOneID(j.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *JobClient) UpdateOneID(id int) *JobUpdateOne {
	return &JobUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Job.
func (c *JobClient) Delete() *JobDelete {
	return &JobDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *JobClient) DeleteOne(j *Job) *JobDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *JobClient) DeleteOneID(id int) *JobDeleteOne {
	return &JobDeleteOne{c.Delete().Where(job.ID(id))}
}

// Create returns a query builder for Job.
func (c *JobClient) Query() *JobQuery {
	return &JobQuery{config: c.config}
}

// Get returns a Job entity by its id.
func (c *JobClient) Get(ctx context.Context, id int) (*Job, error) {
	return c.Query().Where(job.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobClient) GetX(ctx context.Context, id int) *Job {
	j, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return j
}

// QueryTasks queries the tasks edge of a Job.
func (c *JobClient) QueryTasks(j *Job) *TaskQuery {
	query := &TaskQuery{config: c.config}
	id := j.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(job.Table, job.FieldID, id),
		sqlgraph.To(task.Table, task.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, job.TasksTable, job.TasksColumn),
	)
	query.sql = sqlgraph.Neighbors(j.driver.Dialect(), step)

	return query
}

// QueryTags queries the tags edge of a Job.
func (c *JobClient) QueryTags(j *Job) *TagQuery {
	query := &TagQuery{config: c.config}
	id := j.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(job.Table, job.FieldID, id),
		sqlgraph.To(tag.Table, tag.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, job.TagsTable, job.TagsPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(j.driver.Dialect(), step)

	return query
}

// QueryPrev queries the prev edge of a Job.
func (c *JobClient) QueryPrev(j *Job) *JobQuery {
	query := &JobQuery{config: c.config}
	id := j.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(job.Table, job.FieldID, id),
		sqlgraph.To(job.Table, job.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, job.PrevTable, job.PrevColumn),
	)
	query.sql = sqlgraph.Neighbors(j.driver.Dialect(), step)

	return query
}

// QueryNext queries the next edge of a Job.
func (c *JobClient) QueryNext(j *Job) *JobQuery {
	query := &JobQuery{config: c.config}
	id := j.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(job.Table, job.FieldID, id),
		sqlgraph.To(job.Table, job.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, job.NextTable, job.NextColumn),
	)
	query.sql = sqlgraph.Neighbors(j.driver.Dialect(), step)

	return query
}

// QueryOwner queries the owner edge of a Job.
func (c *JobClient) QueryOwner(j *Job) *UserQuery {
	query := &UserQuery{config: c.config}
	id := j.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(job.Table, job.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, job.OwnerTable, job.OwnerColumn),
	)
	query.sql = sqlgraph.Neighbors(j.driver.Dialect(), step)

	return query
}

// LinkClient is a client for the Link schema.
type LinkClient struct {
	config
}

// NewLinkClient returns a client for the Link from the given config.
func NewLinkClient(c config) *LinkClient {
	return &LinkClient{config: c}
}

// Create returns a create builder for Link.
func (c *LinkClient) Create() *LinkCreate {
	return &LinkCreate{config: c.config}
}

// Update returns an update builder for Link.
func (c *LinkClient) Update() *LinkUpdate {
	return &LinkUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *LinkClient) UpdateOne(l *Link) *LinkUpdateOne {
	return c.UpdateOneID(l.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *LinkClient) UpdateOneID(id int) *LinkUpdateOne {
	return &LinkUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Link.
func (c *LinkClient) Delete() *LinkDelete {
	return &LinkDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LinkClient) DeleteOne(l *Link) *LinkDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LinkClient) DeleteOneID(id int) *LinkDeleteOne {
	return &LinkDeleteOne{c.Delete().Where(link.ID(id))}
}

// Create returns a query builder for Link.
func (c *LinkClient) Query() *LinkQuery {
	return &LinkQuery{config: c.config}
}

// Get returns a Link entity by its id.
func (c *LinkClient) Get(ctx context.Context, id int) (*Link, error) {
	return c.Query().Where(link.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LinkClient) GetX(ctx context.Context, id int) *Link {
	l, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return l
}

// QueryFile queries the file edge of a Link.
func (c *LinkClient) QueryFile(l *Link) *FileQuery {
	query := &FileQuery{config: c.config}
	id := l.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(link.Table, link.FieldID, id),
		sqlgraph.To(file.Table, file.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, link.FileTable, link.FileColumn),
	)
	query.sql = sqlgraph.Neighbors(l.driver.Dialect(), step)

	return query
}

// ServiceClient is a client for the Service schema.
type ServiceClient struct {
	config
}

// NewServiceClient returns a client for the Service from the given config.
func NewServiceClient(c config) *ServiceClient {
	return &ServiceClient{config: c}
}

// Create returns a create builder for Service.
func (c *ServiceClient) Create() *ServiceCreate {
	return &ServiceCreate{config: c.config}
}

// Update returns an update builder for Service.
func (c *ServiceClient) Update() *ServiceUpdate {
	return &ServiceUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceClient) UpdateOne(s *Service) *ServiceUpdateOne {
	return c.UpdateOneID(s.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceClient) UpdateOneID(id int) *ServiceUpdateOne {
	return &ServiceUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Service.
func (c *ServiceClient) Delete() *ServiceDelete {
	return &ServiceDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ServiceClient) DeleteOne(s *Service) *ServiceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ServiceClient) DeleteOneID(id int) *ServiceDeleteOne {
	return &ServiceDeleteOne{c.Delete().Where(service.ID(id))}
}

// Create returns a query builder for Service.
func (c *ServiceClient) Query() *ServiceQuery {
	return &ServiceQuery{config: c.config}
}

// Get returns a Service entity by its id.
func (c *ServiceClient) Get(ctx context.Context, id int) (*Service, error) {
	return c.Query().Where(service.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceClient) GetX(ctx context.Context, id int) *Service {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryTag queries the tag edge of a Service.
func (c *ServiceClient) QueryTag(s *Service) *TagQuery {
	query := &TagQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(service.Table, service.FieldID, id),
		sqlgraph.To(tag.Table, tag.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, service.TagTable, service.TagColumn),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	return &TagCreate{config: c.config}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	return &TagUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	return c.UpdateOneID(t.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	return &TagUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	return &TagDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	return &TagDeleteOne{c.Delete().Where(tag.ID(id))}
}

// Create returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{config: c.config}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryTargets queries the targets edge of a Tag.
func (c *TagClient) QueryTargets(t *Tag) *TargetQuery {
	query := &TargetQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(tag.Table, tag.FieldID, id),
		sqlgraph.To(target.Table, target.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, tag.TargetsTable, tag.TargetsPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// QueryTasks queries the tasks edge of a Tag.
func (c *TagClient) QueryTasks(t *Tag) *TaskQuery {
	query := &TaskQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(tag.Table, tag.FieldID, id),
		sqlgraph.To(task.Table, task.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, tag.TasksTable, tag.TasksPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// QueryJobs queries the jobs edge of a Tag.
func (c *TagClient) QueryJobs(t *Tag) *JobQuery {
	query := &JobQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(tag.Table, tag.FieldID, id),
		sqlgraph.To(job.Table, job.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, tag.JobsTable, tag.JobsPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// TargetClient is a client for the Target schema.
type TargetClient struct {
	config
}

// NewTargetClient returns a client for the Target from the given config.
func NewTargetClient(c config) *TargetClient {
	return &TargetClient{config: c}
}

// Create returns a create builder for Target.
func (c *TargetClient) Create() *TargetCreate {
	return &TargetCreate{config: c.config}
}

// Update returns an update builder for Target.
func (c *TargetClient) Update() *TargetUpdate {
	return &TargetUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *TargetClient) UpdateOne(t *Target) *TargetUpdateOne {
	return c.UpdateOneID(t.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *TargetClient) UpdateOneID(id int) *TargetUpdateOne {
	return &TargetUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Target.
func (c *TargetClient) Delete() *TargetDelete {
	return &TargetDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TargetClient) DeleteOne(t *Target) *TargetDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TargetClient) DeleteOneID(id int) *TargetDeleteOne {
	return &TargetDeleteOne{c.Delete().Where(target.ID(id))}
}

// Create returns a query builder for Target.
func (c *TargetClient) Query() *TargetQuery {
	return &TargetQuery{config: c.config}
}

// Get returns a Target entity by its id.
func (c *TargetClient) Get(ctx context.Context, id int) (*Target, error) {
	return c.Query().Where(target.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TargetClient) GetX(ctx context.Context, id int) *Target {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryTasks queries the tasks edge of a Target.
func (c *TargetClient) QueryTasks(t *Target) *TaskQuery {
	query := &TaskQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(target.Table, target.FieldID, id),
		sqlgraph.To(task.Table, task.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, target.TasksTable, target.TasksColumn),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// QueryTags queries the tags edge of a Target.
func (c *TargetClient) QueryTags(t *Target) *TagQuery {
	query := &TagQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(target.Table, target.FieldID, id),
		sqlgraph.To(tag.Table, tag.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, target.TagsTable, target.TagsPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// QueryCredentials queries the credentials edge of a Target.
func (c *TargetClient) QueryCredentials(t *Target) *CredentialQuery {
	query := &CredentialQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(target.Table, target.FieldID, id),
		sqlgraph.To(credential.Table, credential.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, target.CredentialsTable, target.CredentialsColumn),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Create returns a create builder for Task.
func (c *TaskClient) Create() *TaskCreate {
	return &TaskCreate{config: c.config}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	return &TaskUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	return c.UpdateOneID(t.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id int) *TaskUpdateOne {
	return &TaskUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	return &TaskDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskClient) DeleteOneID(id int) *TaskDeleteOne {
	return &TaskDeleteOne{c.Delete().Where(task.ID(id))}
}

// Create returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{config: c.config}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id int) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id int) *Task {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryTags queries the tags edge of a Task.
func (c *TaskClient) QueryTags(t *Task) *TagQuery {
	query := &TagQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(task.Table, task.FieldID, id),
		sqlgraph.To(tag.Table, tag.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, task.TagsTable, task.TagsPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// QueryJob queries the job edge of a Task.
func (c *TaskClient) QueryJob(t *Task) *JobQuery {
	query := &JobQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(task.Table, task.FieldID, id),
		sqlgraph.To(job.Table, job.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, task.JobTable, task.JobColumn),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// QueryTarget queries the target edge of a Task.
func (c *TaskClient) QueryTarget(t *Task) *TargetQuery {
	query := &TargetQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(task.Table, task.FieldID, id),
		sqlgraph.To(target.Table, target.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, task.TargetTable, task.TargetColumn),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	return &UserCreate{config: c.config}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	return &UserUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	return c.UpdateOneID(u.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	return &UserUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	return &UserDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	return &UserDeleteOne{c.Delete().Where(user.ID(id))}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryJobs queries the jobs edge of a User.
func (c *UserClient) QueryJobs(u *User) *JobQuery {
	query := &JobQuery{config: c.config}
	id := u.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(user.Table, user.FieldID, id),
		sqlgraph.To(job.Table, job.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, user.JobsTable, user.JobsColumn),
	)
	query.sql = sqlgraph.Neighbors(u.driver.Dialect(), step)

	return query
}

// QueryEvents queries the events edge of a User.
func (c *UserClient) QueryEvents(u *User) *EventQuery {
	query := &EventQuery{config: c.config}
	id := u.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(user.Table, user.FieldID, id),
		sqlgraph.To(event.Table, event.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, user.EventsTable, user.EventsColumn),
	)
	query.sql = sqlgraph.Neighbors(u.driver.Dialect(), step)

	return query
}
