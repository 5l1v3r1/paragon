// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kcarretto/paragon/ent/file"
	"github.com/kcarretto/paragon/ent/link"
	"github.com/kcarretto/paragon/ent/predicate"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	Name             *string
	CreationTime     *time.Time
	LastModifiedTime *time.Time
	Size             *int
	addSize          *int
	Content          *[]byte
	Hash             *string
	ContentType      *string
	links            map[int]struct{}
	removedLinks     map[int]struct{}
	predicates       []predicate.File
}

// Where adds a new predicate for the builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.predicates = append(fu.predicates, ps...)
	return fu
}

// SetName sets the Name field.
func (fu *FileUpdate) SetName(s string) *FileUpdate {
	fu.Name = &s
	return fu
}

// SetCreationTime sets the CreationTime field.
func (fu *FileUpdate) SetCreationTime(t time.Time) *FileUpdate {
	fu.CreationTime = &t
	return fu
}

// SetNillableCreationTime sets the CreationTime field if the given value is not nil.
func (fu *FileUpdate) SetNillableCreationTime(t *time.Time) *FileUpdate {
	if t != nil {
		fu.SetCreationTime(*t)
	}
	return fu
}

// SetLastModifiedTime sets the LastModifiedTime field.
func (fu *FileUpdate) SetLastModifiedTime(t time.Time) *FileUpdate {
	fu.LastModifiedTime = &t
	return fu
}

// SetSize sets the Size field.
func (fu *FileUpdate) SetSize(i int) *FileUpdate {
	fu.Size = &i
	fu.addSize = nil
	return fu
}

// SetNillableSize sets the Size field if the given value is not nil.
func (fu *FileUpdate) SetNillableSize(i *int) *FileUpdate {
	if i != nil {
		fu.SetSize(*i)
	}
	return fu
}

// AddSize adds i to Size.
func (fu *FileUpdate) AddSize(i int) *FileUpdate {
	if fu.addSize == nil {
		fu.addSize = &i
	} else {
		*fu.addSize += i
	}
	return fu
}

// SetContent sets the Content field.
func (fu *FileUpdate) SetContent(b []byte) *FileUpdate {
	fu.Content = &b
	return fu
}

// SetHash sets the Hash field.
func (fu *FileUpdate) SetHash(s string) *FileUpdate {
	fu.Hash = &s
	return fu
}

// SetContentType sets the ContentType field.
func (fu *FileUpdate) SetContentType(s string) *FileUpdate {
	fu.ContentType = &s
	return fu
}

// AddLinkIDs adds the links edge to Link by ids.
func (fu *FileUpdate) AddLinkIDs(ids ...int) *FileUpdate {
	if fu.links == nil {
		fu.links = make(map[int]struct{})
	}
	for i := range ids {
		fu.links[ids[i]] = struct{}{}
	}
	return fu
}

// AddLinks adds the links edges to Link.
func (fu *FileUpdate) AddLinks(l ...*Link) *FileUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return fu.AddLinkIDs(ids...)
}

// RemoveLinkIDs removes the links edge to Link by ids.
func (fu *FileUpdate) RemoveLinkIDs(ids ...int) *FileUpdate {
	if fu.removedLinks == nil {
		fu.removedLinks = make(map[int]struct{})
	}
	for i := range ids {
		fu.removedLinks[ids[i]] = struct{}{}
	}
	return fu
}

// RemoveLinks removes links edges to Link.
func (fu *FileUpdate) RemoveLinks(l ...*Link) *FileUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return fu.RemoveLinkIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	if fu.Name != nil {
		if err := file.NameValidator(*fu.Name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
		}
	}
	if fu.Size != nil {
		if err := file.SizeValidator(*fu.Size); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"Size\": %v", err)
		}
	}
	return fu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   file.Table,
			Columns: file.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: file.FieldID,
			},
		},
	}
	if ps := fu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := fu.Name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldName,
		})
	}
	if value := fu.CreationTime; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: file.FieldCreationTime,
		})
	}
	if value := fu.LastModifiedTime; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: file.FieldLastModifiedTime,
		})
	}
	if value := fu.Size; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: file.FieldSize,
		})
	}
	if value := fu.addSize; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: file.FieldSize,
		})
	}
	if value := fu.Content; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  *value,
			Column: file.FieldContent,
		})
	}
	if value := fu.Hash; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldHash,
		})
	}
	if value := fu.ContentType; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldContentType,
		})
	}
	if nodes := fu.removedLinks; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.LinksTable,
			Columns: []string{file.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.links; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.LinksTable,
			Columns: []string{file.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	id               int
	Name             *string
	CreationTime     *time.Time
	LastModifiedTime *time.Time
	Size             *int
	addSize          *int
	Content          *[]byte
	Hash             *string
	ContentType      *string
	links            map[int]struct{}
	removedLinks     map[int]struct{}
}

// SetName sets the Name field.
func (fuo *FileUpdateOne) SetName(s string) *FileUpdateOne {
	fuo.Name = &s
	return fuo
}

// SetCreationTime sets the CreationTime field.
func (fuo *FileUpdateOne) SetCreationTime(t time.Time) *FileUpdateOne {
	fuo.CreationTime = &t
	return fuo
}

// SetNillableCreationTime sets the CreationTime field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCreationTime(t *time.Time) *FileUpdateOne {
	if t != nil {
		fuo.SetCreationTime(*t)
	}
	return fuo
}

// SetLastModifiedTime sets the LastModifiedTime field.
func (fuo *FileUpdateOne) SetLastModifiedTime(t time.Time) *FileUpdateOne {
	fuo.LastModifiedTime = &t
	return fuo
}

// SetSize sets the Size field.
func (fuo *FileUpdateOne) SetSize(i int) *FileUpdateOne {
	fuo.Size = &i
	fuo.addSize = nil
	return fuo
}

// SetNillableSize sets the Size field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableSize(i *int) *FileUpdateOne {
	if i != nil {
		fuo.SetSize(*i)
	}
	return fuo
}

// AddSize adds i to Size.
func (fuo *FileUpdateOne) AddSize(i int) *FileUpdateOne {
	if fuo.addSize == nil {
		fuo.addSize = &i
	} else {
		*fuo.addSize += i
	}
	return fuo
}

// SetContent sets the Content field.
func (fuo *FileUpdateOne) SetContent(b []byte) *FileUpdateOne {
	fuo.Content = &b
	return fuo
}

// SetHash sets the Hash field.
func (fuo *FileUpdateOne) SetHash(s string) *FileUpdateOne {
	fuo.Hash = &s
	return fuo
}

// SetContentType sets the ContentType field.
func (fuo *FileUpdateOne) SetContentType(s string) *FileUpdateOne {
	fuo.ContentType = &s
	return fuo
}

// AddLinkIDs adds the links edge to Link by ids.
func (fuo *FileUpdateOne) AddLinkIDs(ids ...int) *FileUpdateOne {
	if fuo.links == nil {
		fuo.links = make(map[int]struct{})
	}
	for i := range ids {
		fuo.links[ids[i]] = struct{}{}
	}
	return fuo
}

// AddLinks adds the links edges to Link.
func (fuo *FileUpdateOne) AddLinks(l ...*Link) *FileUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return fuo.AddLinkIDs(ids...)
}

// RemoveLinkIDs removes the links edge to Link by ids.
func (fuo *FileUpdateOne) RemoveLinkIDs(ids ...int) *FileUpdateOne {
	if fuo.removedLinks == nil {
		fuo.removedLinks = make(map[int]struct{})
	}
	for i := range ids {
		fuo.removedLinks[ids[i]] = struct{}{}
	}
	return fuo
}

// RemoveLinks removes links edges to Link.
func (fuo *FileUpdateOne) RemoveLinks(l ...*Link) *FileUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return fuo.RemoveLinkIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	if fuo.Name != nil {
		if err := file.NameValidator(*fuo.Name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
		}
	}
	if fuo.Size != nil {
		if err := file.SizeValidator(*fuo.Size); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"Size\": %v", err)
		}
	}
	return fuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	f, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return f
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (f *File, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   file.Table,
			Columns: file.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  fuo.id,
				Type:   field.TypeInt,
				Column: file.FieldID,
			},
		},
	}
	if value := fuo.Name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldName,
		})
	}
	if value := fuo.CreationTime; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: file.FieldCreationTime,
		})
	}
	if value := fuo.LastModifiedTime; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: file.FieldLastModifiedTime,
		})
	}
	if value := fuo.Size; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: file.FieldSize,
		})
	}
	if value := fuo.addSize; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: file.FieldSize,
		})
	}
	if value := fuo.Content; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  *value,
			Column: file.FieldContent,
		})
	}
	if value := fuo.Hash; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldHash,
		})
	}
	if value := fuo.ContentType; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldContentType,
		})
	}
	if nodes := fuo.removedLinks; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.LinksTable,
			Columns: []string{file.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.links; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.LinksTable,
			Columns: []string{file.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	f = &File{config: fuo.config}
	_spec.Assign = f.assignValues
	_spec.ScanValues = f.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return f, nil
}
