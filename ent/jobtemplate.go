// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// JobTemplate is the model entity for the JobTemplate schema.
type JobTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Content holds the value of the "Content" field.
	Content string `json:"Content,omitempty"`
}

// FromRows scans the sql response data into JobTemplate.
func (jt *JobTemplate) FromRows(rows *sql.Rows) error {
	var vjt struct {
		ID      int
		Name    sql.NullString
		Content sql.NullString
	}
	// the order here should be the same as in the `jobtemplate.Columns`.
	if err := rows.Scan(
		&vjt.ID,
		&vjt.Name,
		&vjt.Content,
	); err != nil {
		return err
	}
	jt.ID = vjt.ID
	jt.Name = vjt.Name.String
	jt.Content = vjt.Content.String
	return nil
}

// QueryJobs queries the jobs edge of the JobTemplate.
func (jt *JobTemplate) QueryJobs() *JobQuery {
	return (&JobTemplateClient{jt.config}).QueryJobs(jt)
}

// QueryTags queries the tags edge of the JobTemplate.
func (jt *JobTemplate) QueryTags() *TagQuery {
	return (&JobTemplateClient{jt.config}).QueryTags(jt)
}

// Update returns a builder for updating this JobTemplate.
// Note that, you need to call JobTemplate.Unwrap() before calling this method, if this JobTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (jt *JobTemplate) Update() *JobTemplateUpdateOne {
	return (&JobTemplateClient{jt.config}).UpdateOne(jt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (jt *JobTemplate) Unwrap() *JobTemplate {
	tx, ok := jt.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobTemplate is not a transactional entity")
	}
	jt.config.driver = tx.drv
	return jt
}

// String implements the fmt.Stringer.
func (jt *JobTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("JobTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v", jt.ID))
	builder.WriteString(", Name=")
	builder.WriteString(jt.Name)
	builder.WriteString(", Content=")
	builder.WriteString(jt.Content)
	builder.WriteByte(')')
	return builder.String()
}

// JobTemplates is a parsable slice of JobTemplate.
type JobTemplates []*JobTemplate

// FromRows scans the sql response data into JobTemplates.
func (jt *JobTemplates) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vjt := &JobTemplate{}
		if err := vjt.FromRows(rows); err != nil {
			return err
		}
		*jt = append(*jt, vjt)
	}
	return nil
}

func (jt JobTemplates) config(cfg config) {
	for _i := range jt {
		jt[_i].config = cfg
	}
}
