// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kcarretto/paragon/ent/credential"
	"github.com/kcarretto/paragon/ent/predicate"
)

// CredentialUpdate is the builder for updating Credential entities.
type CredentialUpdate struct {
	config
	principal  *string
	secret     *string
	kind       *credential.Kind
	fails      *int
	addfails   *int
	predicates []predicate.Credential
}

// Where adds a new predicate for the builder.
func (cu *CredentialUpdate) Where(ps ...predicate.Credential) *CredentialUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetPrincipal sets the principal field.
func (cu *CredentialUpdate) SetPrincipal(s string) *CredentialUpdate {
	cu.principal = &s
	return cu
}

// SetSecret sets the secret field.
func (cu *CredentialUpdate) SetSecret(s string) *CredentialUpdate {
	cu.secret = &s
	return cu
}

// SetKind sets the kind field.
func (cu *CredentialUpdate) SetKind(c credential.Kind) *CredentialUpdate {
	cu.kind = &c
	return cu
}

// SetFails sets the fails field.
func (cu *CredentialUpdate) SetFails(i int) *CredentialUpdate {
	cu.fails = &i
	cu.addfails = nil
	return cu
}

// SetNillableFails sets the fails field if the given value is not nil.
func (cu *CredentialUpdate) SetNillableFails(i *int) *CredentialUpdate {
	if i != nil {
		cu.SetFails(*i)
	}
	return cu
}

// AddFails adds i to fails.
func (cu *CredentialUpdate) AddFails(i int) *CredentialUpdate {
	if cu.addfails == nil {
		cu.addfails = &i
	} else {
		*cu.addfails += i
	}
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CredentialUpdate) Save(ctx context.Context) (int, error) {
	if cu.kind != nil {
		if err := credential.KindValidator(*cu.kind); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"kind\": %v", err)
		}
	}
	if cu.fails != nil {
		if err := credential.FailsValidator(*cu.fails); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"fails\": %v", err)
		}
	}
	return cu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CredentialUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CredentialUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CredentialUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CredentialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   credential.Table,
			Columns: credential.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: credential.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := cu.principal; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: credential.FieldPrincipal,
		})
	}
	if value := cu.secret; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: credential.FieldSecret,
		})
	}
	if value := cu.kind; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: credential.FieldKind,
		})
	}
	if value := cu.fails; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: credential.FieldFails,
		})
	}
	if value := cu.addfails; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: credential.FieldFails,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CredentialUpdateOne is the builder for updating a single Credential entity.
type CredentialUpdateOne struct {
	config
	id        int
	principal *string
	secret    *string
	kind      *credential.Kind
	fails     *int
	addfails  *int
}

// SetPrincipal sets the principal field.
func (cuo *CredentialUpdateOne) SetPrincipal(s string) *CredentialUpdateOne {
	cuo.principal = &s
	return cuo
}

// SetSecret sets the secret field.
func (cuo *CredentialUpdateOne) SetSecret(s string) *CredentialUpdateOne {
	cuo.secret = &s
	return cuo
}

// SetKind sets the kind field.
func (cuo *CredentialUpdateOne) SetKind(c credential.Kind) *CredentialUpdateOne {
	cuo.kind = &c
	return cuo
}

// SetFails sets the fails field.
func (cuo *CredentialUpdateOne) SetFails(i int) *CredentialUpdateOne {
	cuo.fails = &i
	cuo.addfails = nil
	return cuo
}

// SetNillableFails sets the fails field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableFails(i *int) *CredentialUpdateOne {
	if i != nil {
		cuo.SetFails(*i)
	}
	return cuo
}

// AddFails adds i to fails.
func (cuo *CredentialUpdateOne) AddFails(i int) *CredentialUpdateOne {
	if cuo.addfails == nil {
		cuo.addfails = &i
	} else {
		*cuo.addfails += i
	}
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *CredentialUpdateOne) Save(ctx context.Context) (*Credential, error) {
	if cuo.kind != nil {
		if err := credential.KindValidator(*cuo.kind); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"kind\": %v", err)
		}
	}
	if cuo.fails != nil {
		if err := credential.FailsValidator(*cuo.fails); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"fails\": %v", err)
		}
	}
	return cuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CredentialUpdateOne) SaveX(ctx context.Context) *Credential {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *CredentialUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CredentialUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CredentialUpdateOne) sqlSave(ctx context.Context) (c *Credential, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   credential.Table,
			Columns: credential.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  cuo.id,
				Type:   field.TypeInt,
				Column: credential.FieldID,
			},
		},
	}
	if value := cuo.principal; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: credential.FieldPrincipal,
		})
	}
	if value := cuo.secret; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: credential.FieldSecret,
		})
	}
	if value := cuo.kind; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: credential.FieldKind,
		})
	}
	if value := cuo.fails; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: credential.FieldFails,
		})
	}
	if value := cuo.addfails; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: credential.FieldFails,
		})
	}
	c = &Credential{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
