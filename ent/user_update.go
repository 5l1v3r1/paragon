// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	Name  *string
	Email *string

	PhotoURL          *string
	SessionToken      *string
	clearSessionToken bool
	Activated         *bool
	predicates        []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetName sets the Name field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.Name = &s
	return uu
}

// SetEmail sets the Email field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.Email = &s
	return uu
}

// SetPhotoURL sets the PhotoURL field.
func (uu *UserUpdate) SetPhotoURL(s string) *UserUpdate {
	uu.PhotoURL = &s
	return uu
}

// SetSessionToken sets the SessionToken field.
func (uu *UserUpdate) SetSessionToken(s string) *UserUpdate {
	uu.SessionToken = &s
	return uu
}

// SetNillableSessionToken sets the SessionToken field if the given value is not nil.
func (uu *UserUpdate) SetNillableSessionToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetSessionToken(*s)
	}
	return uu
}

// ClearSessionToken clears the value of SessionToken.
func (uu *UserUpdate) ClearSessionToken() *UserUpdate {
	uu.SessionToken = nil
	uu.clearSessionToken = true
	return uu
}

// SetActivated sets the Activated field.
func (uu *UserUpdate) SetActivated(b bool) *UserUpdate {
	uu.Activated = &b
	return uu
}

// SetNillableActivated sets the Activated field if the given value is not nil.
func (uu *UserUpdate) SetNillableActivated(b *bool) *UserUpdate {
	if b != nil {
		uu.SetActivated(*b)
	}
	return uu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if uu.Name != nil {
		if err := user.NameValidator(*uu.Name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
		}
	}
	return uu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := uu.Name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldName,
		})
	}
	if value := uu.Email; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldEmail,
		})
	}
	if value := uu.PhotoURL; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldPhotoURL,
		})
	}
	if value := uu.SessionToken; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldSessionToken,
		})
	}
	if uu.clearSessionToken {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldSessionToken,
		})
	}
	if value := uu.Activated; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: user.FieldActivated,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	id    int
	Name  *string
	Email *string

	PhotoURL          *string
	SessionToken      *string
	clearSessionToken bool
	Activated         *bool
}

// SetName sets the Name field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.Name = &s
	return uuo
}

// SetEmail sets the Email field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.Email = &s
	return uuo
}

// SetPhotoURL sets the PhotoURL field.
func (uuo *UserUpdateOne) SetPhotoURL(s string) *UserUpdateOne {
	uuo.PhotoURL = &s
	return uuo
}

// SetSessionToken sets the SessionToken field.
func (uuo *UserUpdateOne) SetSessionToken(s string) *UserUpdateOne {
	uuo.SessionToken = &s
	return uuo
}

// SetNillableSessionToken sets the SessionToken field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSessionToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSessionToken(*s)
	}
	return uuo
}

// ClearSessionToken clears the value of SessionToken.
func (uuo *UserUpdateOne) ClearSessionToken() *UserUpdateOne {
	uuo.SessionToken = nil
	uuo.clearSessionToken = true
	return uuo
}

// SetActivated sets the Activated field.
func (uuo *UserUpdateOne) SetActivated(b bool) *UserUpdateOne {
	uuo.Activated = &b
	return uuo
}

// SetNillableActivated sets the Activated field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableActivated(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetActivated(*b)
	}
	return uuo
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if uuo.Name != nil {
		if err := user.NameValidator(*uuo.Name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
		}
	}
	return uuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  uuo.id,
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if value := uuo.Name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldName,
		})
	}
	if value := uuo.Email; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldEmail,
		})
	}
	if value := uuo.PhotoURL; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldPhotoURL,
		})
	}
	if value := uuo.SessionToken; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldSessionToken,
		})
	}
	if uuo.clearSessionToken {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldSessionToken,
		})
	}
	if value := uuo.Activated; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: user.FieldActivated,
		})
	}
	u = &User{config: uuo.config}
	_spec.Assign = u.assignValues
	_spec.ScanValues = u.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return u, nil
}
