// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kcarretto/paragon/ent/credential"
	"github.com/kcarretto/paragon/ent/event"
	"github.com/kcarretto/paragon/ent/file"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/link"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/service"
	"github.com/kcarretto/paragon/ent/tag"
	"github.com/kcarretto/paragon/ent/target"
	"github.com/kcarretto/paragon/ent/task"
	"github.com/kcarretto/paragon/ent/user"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	CreationTime      *time.Time
	Kind              *event.Kind
	job               map[int]struct{}
	file              map[int]struct{}
	credential        map[int]struct{}
	link              map[int]struct{}
	tag               map[int]struct{}
	target            map[int]struct{}
	task              map[int]struct{}
	user              map[int]struct{}
	event             map[int]struct{}
	service           map[int]struct{}
	likers            map[int]struct{}
	owner             map[int]struct{}
	svcOwner          map[int]struct{}
	clearedJob        bool
	clearedFile       bool
	clearedCredential bool
	clearedLink       bool
	clearedTag        bool
	clearedTarget     bool
	clearedTask       bool
	clearedUser       bool
	clearedEvent      bool
	clearedService    bool
	removedLikers     map[int]struct{}
	clearedOwner      bool
	clearedSvcOwner   bool
	predicates        []predicate.Event
}

// Where adds a new predicate for the builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.predicates = append(eu.predicates, ps...)
	return eu
}

// SetCreationTime sets the CreationTime field.
func (eu *EventUpdate) SetCreationTime(t time.Time) *EventUpdate {
	eu.CreationTime = &t
	return eu
}

// SetNillableCreationTime sets the CreationTime field if the given value is not nil.
func (eu *EventUpdate) SetNillableCreationTime(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetCreationTime(*t)
	}
	return eu
}

// SetKind sets the Kind field.
func (eu *EventUpdate) SetKind(e event.Kind) *EventUpdate {
	eu.Kind = &e
	return eu
}

// SetJobID sets the job edge to Job by id.
func (eu *EventUpdate) SetJobID(id int) *EventUpdate {
	if eu.job == nil {
		eu.job = make(map[int]struct{})
	}
	eu.job[id] = struct{}{}
	return eu
}

// SetNillableJobID sets the job edge to Job by id if the given value is not nil.
func (eu *EventUpdate) SetNillableJobID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetJobID(*id)
	}
	return eu
}

// SetJob sets the job edge to Job.
func (eu *EventUpdate) SetJob(j *Job) *EventUpdate {
	return eu.SetJobID(j.ID)
}

// SetFileID sets the file edge to File by id.
func (eu *EventUpdate) SetFileID(id int) *EventUpdate {
	if eu.file == nil {
		eu.file = make(map[int]struct{})
	}
	eu.file[id] = struct{}{}
	return eu
}

// SetNillableFileID sets the file edge to File by id if the given value is not nil.
func (eu *EventUpdate) SetNillableFileID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetFileID(*id)
	}
	return eu
}

// SetFile sets the file edge to File.
func (eu *EventUpdate) SetFile(f *File) *EventUpdate {
	return eu.SetFileID(f.ID)
}

// SetCredentialID sets the credential edge to Credential by id.
func (eu *EventUpdate) SetCredentialID(id int) *EventUpdate {
	if eu.credential == nil {
		eu.credential = make(map[int]struct{})
	}
	eu.credential[id] = struct{}{}
	return eu
}

// SetNillableCredentialID sets the credential edge to Credential by id if the given value is not nil.
func (eu *EventUpdate) SetNillableCredentialID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetCredentialID(*id)
	}
	return eu
}

// SetCredential sets the credential edge to Credential.
func (eu *EventUpdate) SetCredential(c *Credential) *EventUpdate {
	return eu.SetCredentialID(c.ID)
}

// SetLinkID sets the link edge to Link by id.
func (eu *EventUpdate) SetLinkID(id int) *EventUpdate {
	if eu.link == nil {
		eu.link = make(map[int]struct{})
	}
	eu.link[id] = struct{}{}
	return eu
}

// SetNillableLinkID sets the link edge to Link by id if the given value is not nil.
func (eu *EventUpdate) SetNillableLinkID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetLinkID(*id)
	}
	return eu
}

// SetLink sets the link edge to Link.
func (eu *EventUpdate) SetLink(l *Link) *EventUpdate {
	return eu.SetLinkID(l.ID)
}

// SetTagID sets the tag edge to Tag by id.
func (eu *EventUpdate) SetTagID(id int) *EventUpdate {
	if eu.tag == nil {
		eu.tag = make(map[int]struct{})
	}
	eu.tag[id] = struct{}{}
	return eu
}

// SetNillableTagID sets the tag edge to Tag by id if the given value is not nil.
func (eu *EventUpdate) SetNillableTagID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetTagID(*id)
	}
	return eu
}

// SetTag sets the tag edge to Tag.
func (eu *EventUpdate) SetTag(t *Tag) *EventUpdate {
	return eu.SetTagID(t.ID)
}

// SetTargetID sets the target edge to Target by id.
func (eu *EventUpdate) SetTargetID(id int) *EventUpdate {
	if eu.target == nil {
		eu.target = make(map[int]struct{})
	}
	eu.target[id] = struct{}{}
	return eu
}

// SetNillableTargetID sets the target edge to Target by id if the given value is not nil.
func (eu *EventUpdate) SetNillableTargetID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetTargetID(*id)
	}
	return eu
}

// SetTarget sets the target edge to Target.
func (eu *EventUpdate) SetTarget(t *Target) *EventUpdate {
	return eu.SetTargetID(t.ID)
}

// SetTaskID sets the task edge to Task by id.
func (eu *EventUpdate) SetTaskID(id int) *EventUpdate {
	if eu.task == nil {
		eu.task = make(map[int]struct{})
	}
	eu.task[id] = struct{}{}
	return eu
}

// SetNillableTaskID sets the task edge to Task by id if the given value is not nil.
func (eu *EventUpdate) SetNillableTaskID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetTaskID(*id)
	}
	return eu
}

// SetTask sets the task edge to Task.
func (eu *EventUpdate) SetTask(t *Task) *EventUpdate {
	return eu.SetTaskID(t.ID)
}

// SetUserID sets the user edge to User by id.
func (eu *EventUpdate) SetUserID(id int) *EventUpdate {
	if eu.user == nil {
		eu.user = make(map[int]struct{})
	}
	eu.user[id] = struct{}{}
	return eu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (eu *EventUpdate) SetNillableUserID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetUserID(*id)
	}
	return eu
}

// SetUser sets the user edge to User.
func (eu *EventUpdate) SetUser(u *User) *EventUpdate {
	return eu.SetUserID(u.ID)
}

// SetEventID sets the event edge to Event by id.
func (eu *EventUpdate) SetEventID(id int) *EventUpdate {
	if eu.event == nil {
		eu.event = make(map[int]struct{})
	}
	eu.event[id] = struct{}{}
	return eu
}

// SetNillableEventID sets the event edge to Event by id if the given value is not nil.
func (eu *EventUpdate) SetNillableEventID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetEventID(*id)
	}
	return eu
}

// SetEvent sets the event edge to Event.
func (eu *EventUpdate) SetEvent(e *Event) *EventUpdate {
	return eu.SetEventID(e.ID)
}

// SetServiceID sets the service edge to Service by id.
func (eu *EventUpdate) SetServiceID(id int) *EventUpdate {
	if eu.service == nil {
		eu.service = make(map[int]struct{})
	}
	eu.service[id] = struct{}{}
	return eu
}

// SetNillableServiceID sets the service edge to Service by id if the given value is not nil.
func (eu *EventUpdate) SetNillableServiceID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetServiceID(*id)
	}
	return eu
}

// SetService sets the service edge to Service.
func (eu *EventUpdate) SetService(s *Service) *EventUpdate {
	return eu.SetServiceID(s.ID)
}

// AddLikerIDs adds the likers edge to User by ids.
func (eu *EventUpdate) AddLikerIDs(ids ...int) *EventUpdate {
	if eu.likers == nil {
		eu.likers = make(map[int]struct{})
	}
	for i := range ids {
		eu.likers[ids[i]] = struct{}{}
	}
	return eu
}

// AddLikers adds the likers edges to User.
func (eu *EventUpdate) AddLikers(u ...*User) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddLikerIDs(ids...)
}

// SetOwnerID sets the owner edge to User by id.
func (eu *EventUpdate) SetOwnerID(id int) *EventUpdate {
	if eu.owner == nil {
		eu.owner = make(map[int]struct{})
	}
	eu.owner[id] = struct{}{}
	return eu
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (eu *EventUpdate) SetNillableOwnerID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetOwnerID(*id)
	}
	return eu
}

// SetOwner sets the owner edge to User.
func (eu *EventUpdate) SetOwner(u *User) *EventUpdate {
	return eu.SetOwnerID(u.ID)
}

// SetSvcOwnerID sets the svcOwner edge to Service by id.
func (eu *EventUpdate) SetSvcOwnerID(id int) *EventUpdate {
	if eu.svcOwner == nil {
		eu.svcOwner = make(map[int]struct{})
	}
	eu.svcOwner[id] = struct{}{}
	return eu
}

// SetNillableSvcOwnerID sets the svcOwner edge to Service by id if the given value is not nil.
func (eu *EventUpdate) SetNillableSvcOwnerID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetSvcOwnerID(*id)
	}
	return eu
}

// SetSvcOwner sets the svcOwner edge to Service.
func (eu *EventUpdate) SetSvcOwner(s *Service) *EventUpdate {
	return eu.SetSvcOwnerID(s.ID)
}

// ClearJob clears the job edge to Job.
func (eu *EventUpdate) ClearJob() *EventUpdate {
	eu.clearedJob = true
	return eu
}

// ClearFile clears the file edge to File.
func (eu *EventUpdate) ClearFile() *EventUpdate {
	eu.clearedFile = true
	return eu
}

// ClearCredential clears the credential edge to Credential.
func (eu *EventUpdate) ClearCredential() *EventUpdate {
	eu.clearedCredential = true
	return eu
}

// ClearLink clears the link edge to Link.
func (eu *EventUpdate) ClearLink() *EventUpdate {
	eu.clearedLink = true
	return eu
}

// ClearTag clears the tag edge to Tag.
func (eu *EventUpdate) ClearTag() *EventUpdate {
	eu.clearedTag = true
	return eu
}

// ClearTarget clears the target edge to Target.
func (eu *EventUpdate) ClearTarget() *EventUpdate {
	eu.clearedTarget = true
	return eu
}

// ClearTask clears the task edge to Task.
func (eu *EventUpdate) ClearTask() *EventUpdate {
	eu.clearedTask = true
	return eu
}

// ClearUser clears the user edge to User.
func (eu *EventUpdate) ClearUser() *EventUpdate {
	eu.clearedUser = true
	return eu
}

// ClearEvent clears the event edge to Event.
func (eu *EventUpdate) ClearEvent() *EventUpdate {
	eu.clearedEvent = true
	return eu
}

// ClearService clears the service edge to Service.
func (eu *EventUpdate) ClearService() *EventUpdate {
	eu.clearedService = true
	return eu
}

// RemoveLikerIDs removes the likers edge to User by ids.
func (eu *EventUpdate) RemoveLikerIDs(ids ...int) *EventUpdate {
	if eu.removedLikers == nil {
		eu.removedLikers = make(map[int]struct{})
	}
	for i := range ids {
		eu.removedLikers[ids[i]] = struct{}{}
	}
	return eu
}

// RemoveLikers removes likers edges to User.
func (eu *EventUpdate) RemoveLikers(u ...*User) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveLikerIDs(ids...)
}

// ClearOwner clears the owner edge to User.
func (eu *EventUpdate) ClearOwner() *EventUpdate {
	eu.clearedOwner = true
	return eu
}

// ClearSvcOwner clears the svcOwner edge to Service.
func (eu *EventUpdate) ClearSvcOwner() *EventUpdate {
	eu.clearedSvcOwner = true
	return eu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	if eu.Kind != nil {
		if err := event.KindValidator(*eu.Kind); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"Kind\": %v", err)
		}
	}
	if len(eu.job) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"job\"")
	}
	if len(eu.file) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"file\"")
	}
	if len(eu.credential) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"credential\"")
	}
	if len(eu.link) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"link\"")
	}
	if len(eu.tag) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"tag\"")
	}
	if len(eu.target) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"target\"")
	}
	if len(eu.task) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"task\"")
	}
	if len(eu.user) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"user\"")
	}
	if len(eu.event) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"event\"")
	}
	if len(eu.service) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"service\"")
	}
	if len(eu.owner) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"owner\"")
	}
	if len(eu.svcOwner) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"svcOwner\"")
	}
	return eu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
	}
	if ps := eu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := eu.CreationTime; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: event.FieldCreationTime,
		})
	}
	if value := eu.Kind; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: event.FieldKind,
		})
	}
	if eu.clearedJob {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.JobTable,
			Columns: []string{event.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.job; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.JobTable,
			Columns: []string{event.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.clearedFile {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.file; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.clearedCredential {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CredentialTable,
			Columns: []string{event.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.credential; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CredentialTable,
			Columns: []string{event.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.clearedLink {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LinkTable,
			Columns: []string{event.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.link; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LinkTable,
			Columns: []string{event.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.clearedTag {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TagTable,
			Columns: []string{event.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.tag; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TagTable,
			Columns: []string{event.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.clearedTarget {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TargetTable,
			Columns: []string{event.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.target; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TargetTable,
			Columns: []string{event.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.clearedTask {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TaskTable,
			Columns: []string{event.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.task; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TaskTable,
			Columns: []string{event.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.clearedUser {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.clearedEvent {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.EventTable,
			Columns: []string{event.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.event; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.EventTable,
			Columns: []string{event.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.clearedService {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ServiceTable,
			Columns: []string{event.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.service; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ServiceTable,
			Columns: []string{event.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.removedLikers; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.LikersTable,
			Columns: []string{event.LikersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.likers; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.LikersTable,
			Columns: []string{event.LikersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.clearedOwner {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerTable,
			Columns: []string{event.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.owner; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerTable,
			Columns: []string{event.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.clearedSvcOwner {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.SvcOwnerTable,
			Columns: []string{event.SvcOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.svcOwner; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.SvcOwnerTable,
			Columns: []string{event.SvcOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	id                int
	CreationTime      *time.Time
	Kind              *event.Kind
	job               map[int]struct{}
	file              map[int]struct{}
	credential        map[int]struct{}
	link              map[int]struct{}
	tag               map[int]struct{}
	target            map[int]struct{}
	task              map[int]struct{}
	user              map[int]struct{}
	event             map[int]struct{}
	service           map[int]struct{}
	likers            map[int]struct{}
	owner             map[int]struct{}
	svcOwner          map[int]struct{}
	clearedJob        bool
	clearedFile       bool
	clearedCredential bool
	clearedLink       bool
	clearedTag        bool
	clearedTarget     bool
	clearedTask       bool
	clearedUser       bool
	clearedEvent      bool
	clearedService    bool
	removedLikers     map[int]struct{}
	clearedOwner      bool
	clearedSvcOwner   bool
}

// SetCreationTime sets the CreationTime field.
func (euo *EventUpdateOne) SetCreationTime(t time.Time) *EventUpdateOne {
	euo.CreationTime = &t
	return euo
}

// SetNillableCreationTime sets the CreationTime field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCreationTime(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetCreationTime(*t)
	}
	return euo
}

// SetKind sets the Kind field.
func (euo *EventUpdateOne) SetKind(e event.Kind) *EventUpdateOne {
	euo.Kind = &e
	return euo
}

// SetJobID sets the job edge to Job by id.
func (euo *EventUpdateOne) SetJobID(id int) *EventUpdateOne {
	if euo.job == nil {
		euo.job = make(map[int]struct{})
	}
	euo.job[id] = struct{}{}
	return euo
}

// SetNillableJobID sets the job edge to Job by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableJobID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetJobID(*id)
	}
	return euo
}

// SetJob sets the job edge to Job.
func (euo *EventUpdateOne) SetJob(j *Job) *EventUpdateOne {
	return euo.SetJobID(j.ID)
}

// SetFileID sets the file edge to File by id.
func (euo *EventUpdateOne) SetFileID(id int) *EventUpdateOne {
	if euo.file == nil {
		euo.file = make(map[int]struct{})
	}
	euo.file[id] = struct{}{}
	return euo
}

// SetNillableFileID sets the file edge to File by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableFileID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetFileID(*id)
	}
	return euo
}

// SetFile sets the file edge to File.
func (euo *EventUpdateOne) SetFile(f *File) *EventUpdateOne {
	return euo.SetFileID(f.ID)
}

// SetCredentialID sets the credential edge to Credential by id.
func (euo *EventUpdateOne) SetCredentialID(id int) *EventUpdateOne {
	if euo.credential == nil {
		euo.credential = make(map[int]struct{})
	}
	euo.credential[id] = struct{}{}
	return euo
}

// SetNillableCredentialID sets the credential edge to Credential by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCredentialID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetCredentialID(*id)
	}
	return euo
}

// SetCredential sets the credential edge to Credential.
func (euo *EventUpdateOne) SetCredential(c *Credential) *EventUpdateOne {
	return euo.SetCredentialID(c.ID)
}

// SetLinkID sets the link edge to Link by id.
func (euo *EventUpdateOne) SetLinkID(id int) *EventUpdateOne {
	if euo.link == nil {
		euo.link = make(map[int]struct{})
	}
	euo.link[id] = struct{}{}
	return euo
}

// SetNillableLinkID sets the link edge to Link by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLinkID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetLinkID(*id)
	}
	return euo
}

// SetLink sets the link edge to Link.
func (euo *EventUpdateOne) SetLink(l *Link) *EventUpdateOne {
	return euo.SetLinkID(l.ID)
}

// SetTagID sets the tag edge to Tag by id.
func (euo *EventUpdateOne) SetTagID(id int) *EventUpdateOne {
	if euo.tag == nil {
		euo.tag = make(map[int]struct{})
	}
	euo.tag[id] = struct{}{}
	return euo
}

// SetNillableTagID sets the tag edge to Tag by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTagID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetTagID(*id)
	}
	return euo
}

// SetTag sets the tag edge to Tag.
func (euo *EventUpdateOne) SetTag(t *Tag) *EventUpdateOne {
	return euo.SetTagID(t.ID)
}

// SetTargetID sets the target edge to Target by id.
func (euo *EventUpdateOne) SetTargetID(id int) *EventUpdateOne {
	if euo.target == nil {
		euo.target = make(map[int]struct{})
	}
	euo.target[id] = struct{}{}
	return euo
}

// SetNillableTargetID sets the target edge to Target by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTargetID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetTargetID(*id)
	}
	return euo
}

// SetTarget sets the target edge to Target.
func (euo *EventUpdateOne) SetTarget(t *Target) *EventUpdateOne {
	return euo.SetTargetID(t.ID)
}

// SetTaskID sets the task edge to Task by id.
func (euo *EventUpdateOne) SetTaskID(id int) *EventUpdateOne {
	if euo.task == nil {
		euo.task = make(map[int]struct{})
	}
	euo.task[id] = struct{}{}
	return euo
}

// SetNillableTaskID sets the task edge to Task by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTaskID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetTaskID(*id)
	}
	return euo
}

// SetTask sets the task edge to Task.
func (euo *EventUpdateOne) SetTask(t *Task) *EventUpdateOne {
	return euo.SetTaskID(t.ID)
}

// SetUserID sets the user edge to User by id.
func (euo *EventUpdateOne) SetUserID(id int) *EventUpdateOne {
	if euo.user == nil {
		euo.user = make(map[int]struct{})
	}
	euo.user[id] = struct{}{}
	return euo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableUserID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetUserID(*id)
	}
	return euo
}

// SetUser sets the user edge to User.
func (euo *EventUpdateOne) SetUser(u *User) *EventUpdateOne {
	return euo.SetUserID(u.ID)
}

// SetEventID sets the event edge to Event by id.
func (euo *EventUpdateOne) SetEventID(id int) *EventUpdateOne {
	if euo.event == nil {
		euo.event = make(map[int]struct{})
	}
	euo.event[id] = struct{}{}
	return euo
}

// SetNillableEventID sets the event edge to Event by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEventID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetEventID(*id)
	}
	return euo
}

// SetEvent sets the event edge to Event.
func (euo *EventUpdateOne) SetEvent(e *Event) *EventUpdateOne {
	return euo.SetEventID(e.ID)
}

// SetServiceID sets the service edge to Service by id.
func (euo *EventUpdateOne) SetServiceID(id int) *EventUpdateOne {
	if euo.service == nil {
		euo.service = make(map[int]struct{})
	}
	euo.service[id] = struct{}{}
	return euo
}

// SetNillableServiceID sets the service edge to Service by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableServiceID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetServiceID(*id)
	}
	return euo
}

// SetService sets the service edge to Service.
func (euo *EventUpdateOne) SetService(s *Service) *EventUpdateOne {
	return euo.SetServiceID(s.ID)
}

// AddLikerIDs adds the likers edge to User by ids.
func (euo *EventUpdateOne) AddLikerIDs(ids ...int) *EventUpdateOne {
	if euo.likers == nil {
		euo.likers = make(map[int]struct{})
	}
	for i := range ids {
		euo.likers[ids[i]] = struct{}{}
	}
	return euo
}

// AddLikers adds the likers edges to User.
func (euo *EventUpdateOne) AddLikers(u ...*User) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddLikerIDs(ids...)
}

// SetOwnerID sets the owner edge to User by id.
func (euo *EventUpdateOne) SetOwnerID(id int) *EventUpdateOne {
	if euo.owner == nil {
		euo.owner = make(map[int]struct{})
	}
	euo.owner[id] = struct{}{}
	return euo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableOwnerID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetOwnerID(*id)
	}
	return euo
}

// SetOwner sets the owner edge to User.
func (euo *EventUpdateOne) SetOwner(u *User) *EventUpdateOne {
	return euo.SetOwnerID(u.ID)
}

// SetSvcOwnerID sets the svcOwner edge to Service by id.
func (euo *EventUpdateOne) SetSvcOwnerID(id int) *EventUpdateOne {
	if euo.svcOwner == nil {
		euo.svcOwner = make(map[int]struct{})
	}
	euo.svcOwner[id] = struct{}{}
	return euo
}

// SetNillableSvcOwnerID sets the svcOwner edge to Service by id if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSvcOwnerID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetSvcOwnerID(*id)
	}
	return euo
}

// SetSvcOwner sets the svcOwner edge to Service.
func (euo *EventUpdateOne) SetSvcOwner(s *Service) *EventUpdateOne {
	return euo.SetSvcOwnerID(s.ID)
}

// ClearJob clears the job edge to Job.
func (euo *EventUpdateOne) ClearJob() *EventUpdateOne {
	euo.clearedJob = true
	return euo
}

// ClearFile clears the file edge to File.
func (euo *EventUpdateOne) ClearFile() *EventUpdateOne {
	euo.clearedFile = true
	return euo
}

// ClearCredential clears the credential edge to Credential.
func (euo *EventUpdateOne) ClearCredential() *EventUpdateOne {
	euo.clearedCredential = true
	return euo
}

// ClearLink clears the link edge to Link.
func (euo *EventUpdateOne) ClearLink() *EventUpdateOne {
	euo.clearedLink = true
	return euo
}

// ClearTag clears the tag edge to Tag.
func (euo *EventUpdateOne) ClearTag() *EventUpdateOne {
	euo.clearedTag = true
	return euo
}

// ClearTarget clears the target edge to Target.
func (euo *EventUpdateOne) ClearTarget() *EventUpdateOne {
	euo.clearedTarget = true
	return euo
}

// ClearTask clears the task edge to Task.
func (euo *EventUpdateOne) ClearTask() *EventUpdateOne {
	euo.clearedTask = true
	return euo
}

// ClearUser clears the user edge to User.
func (euo *EventUpdateOne) ClearUser() *EventUpdateOne {
	euo.clearedUser = true
	return euo
}

// ClearEvent clears the event edge to Event.
func (euo *EventUpdateOne) ClearEvent() *EventUpdateOne {
	euo.clearedEvent = true
	return euo
}

// ClearService clears the service edge to Service.
func (euo *EventUpdateOne) ClearService() *EventUpdateOne {
	euo.clearedService = true
	return euo
}

// RemoveLikerIDs removes the likers edge to User by ids.
func (euo *EventUpdateOne) RemoveLikerIDs(ids ...int) *EventUpdateOne {
	if euo.removedLikers == nil {
		euo.removedLikers = make(map[int]struct{})
	}
	for i := range ids {
		euo.removedLikers[ids[i]] = struct{}{}
	}
	return euo
}

// RemoveLikers removes likers edges to User.
func (euo *EventUpdateOne) RemoveLikers(u ...*User) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveLikerIDs(ids...)
}

// ClearOwner clears the owner edge to User.
func (euo *EventUpdateOne) ClearOwner() *EventUpdateOne {
	euo.clearedOwner = true
	return euo
}

// ClearSvcOwner clears the svcOwner edge to Service.
func (euo *EventUpdateOne) ClearSvcOwner() *EventUpdateOne {
	euo.clearedSvcOwner = true
	return euo
}

// Save executes the query and returns the updated entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	if euo.Kind != nil {
		if err := event.KindValidator(*euo.Kind); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"Kind\": %v", err)
		}
	}
	if len(euo.job) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"job\"")
	}
	if len(euo.file) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"file\"")
	}
	if len(euo.credential) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"credential\"")
	}
	if len(euo.link) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"link\"")
	}
	if len(euo.tag) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"tag\"")
	}
	if len(euo.target) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"target\"")
	}
	if len(euo.task) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"task\"")
	}
	if len(euo.user) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"user\"")
	}
	if len(euo.event) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"event\"")
	}
	if len(euo.service) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"service\"")
	}
	if len(euo.owner) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"owner\"")
	}
	if len(euo.svcOwner) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"svcOwner\"")
	}
	return euo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	e, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return e
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (e *Event, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  euo.id,
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
	}
	if value := euo.CreationTime; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: event.FieldCreationTime,
		})
	}
	if value := euo.Kind; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: event.FieldKind,
		})
	}
	if euo.clearedJob {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.JobTable,
			Columns: []string{event.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.job; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.JobTable,
			Columns: []string{event.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.clearedFile {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.file; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.clearedCredential {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CredentialTable,
			Columns: []string{event.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.credential; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.CredentialTable,
			Columns: []string{event.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.clearedLink {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LinkTable,
			Columns: []string{event.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.link; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.LinkTable,
			Columns: []string{event.LinkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: link.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.clearedTag {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TagTable,
			Columns: []string{event.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.tag; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TagTable,
			Columns: []string{event.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.clearedTarget {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TargetTable,
			Columns: []string{event.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.target; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TargetTable,
			Columns: []string{event.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.clearedTask {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TaskTable,
			Columns: []string{event.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.task; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.TaskTable,
			Columns: []string{event.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.clearedUser {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.clearedEvent {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.EventTable,
			Columns: []string{event.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.event; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.EventTable,
			Columns: []string{event.EventColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.clearedService {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ServiceTable,
			Columns: []string{event.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.service; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.ServiceTable,
			Columns: []string{event.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.removedLikers; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.LikersTable,
			Columns: []string{event.LikersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.likers; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.LikersTable,
			Columns: []string{event.LikersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.clearedOwner {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerTable,
			Columns: []string{event.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.owner; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.OwnerTable,
			Columns: []string{event.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.clearedSvcOwner {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.SvcOwnerTable,
			Columns: []string{event.SvcOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.svcOwner; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.SvcOwnerTable,
			Columns: []string{event.SvcOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	e = &Event{config: euo.config}
	_spec.Assign = e.assignValues
	_spec.ScanValues = e.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return e, nil
}
