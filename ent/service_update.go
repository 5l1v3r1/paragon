// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/service"
	"github.com/kcarretto/paragon/ent/tag"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	Name        *string
	PubKey      *string
	IsActivated *bool
	tag         map[int]struct{}
	clearedTag  bool
	predicates  []predicate.Service
}

// Where adds a new predicate for the builder.
func (su *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetName sets the Name field.
func (su *ServiceUpdate) SetName(s string) *ServiceUpdate {
	su.Name = &s
	return su
}

// SetPubKey sets the PubKey field.
func (su *ServiceUpdate) SetPubKey(s string) *ServiceUpdate {
	su.PubKey = &s
	return su
}

// SetIsActivated sets the IsActivated field.
func (su *ServiceUpdate) SetIsActivated(b bool) *ServiceUpdate {
	su.IsActivated = &b
	return su
}

// SetNillableIsActivated sets the IsActivated field if the given value is not nil.
func (su *ServiceUpdate) SetNillableIsActivated(b *bool) *ServiceUpdate {
	if b != nil {
		su.SetIsActivated(*b)
	}
	return su
}

// SetTagID sets the tag edge to Tag by id.
func (su *ServiceUpdate) SetTagID(id int) *ServiceUpdate {
	if su.tag == nil {
		su.tag = make(map[int]struct{})
	}
	su.tag[id] = struct{}{}
	return su
}

// SetNillableTagID sets the tag edge to Tag by id if the given value is not nil.
func (su *ServiceUpdate) SetNillableTagID(id *int) *ServiceUpdate {
	if id != nil {
		su = su.SetTagID(*id)
	}
	return su
}

// SetTag sets the tag edge to Tag.
func (su *ServiceUpdate) SetTag(t *Tag) *ServiceUpdate {
	return su.SetTagID(t.ID)
}

// ClearTag clears the tag edge to Tag.
func (su *ServiceUpdate) ClearTag() *ServiceUpdate {
	su.clearedTag = true
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *ServiceUpdate) Save(ctx context.Context) (int, error) {
	if su.Name != nil {
		if err := service.NameValidator(*su.Name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
		}
	}
	if len(su.tag) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"tag\"")
	}
	return su.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: service.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := su.Name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: service.FieldName,
		})
	}
	if value := su.PubKey; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: service.FieldPubKey,
		})
	}
	if value := su.IsActivated; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: service.FieldIsActivated,
		})
	}
	if su.clearedTag {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.TagTable,
			Columns: []string{service.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.tag; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.TagTable,
			Columns: []string{service.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	id          int
	Name        *string
	PubKey      *string
	IsActivated *bool
	tag         map[int]struct{}
	clearedTag  bool
}

// SetName sets the Name field.
func (suo *ServiceUpdateOne) SetName(s string) *ServiceUpdateOne {
	suo.Name = &s
	return suo
}

// SetPubKey sets the PubKey field.
func (suo *ServiceUpdateOne) SetPubKey(s string) *ServiceUpdateOne {
	suo.PubKey = &s
	return suo
}

// SetIsActivated sets the IsActivated field.
func (suo *ServiceUpdateOne) SetIsActivated(b bool) *ServiceUpdateOne {
	suo.IsActivated = &b
	return suo
}

// SetNillableIsActivated sets the IsActivated field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableIsActivated(b *bool) *ServiceUpdateOne {
	if b != nil {
		suo.SetIsActivated(*b)
	}
	return suo
}

// SetTagID sets the tag edge to Tag by id.
func (suo *ServiceUpdateOne) SetTagID(id int) *ServiceUpdateOne {
	if suo.tag == nil {
		suo.tag = make(map[int]struct{})
	}
	suo.tag[id] = struct{}{}
	return suo
}

// SetNillableTagID sets the tag edge to Tag by id if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableTagID(id *int) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetTagID(*id)
	}
	return suo
}

// SetTag sets the tag edge to Tag.
func (suo *ServiceUpdateOne) SetTag(t *Tag) *ServiceUpdateOne {
	return suo.SetTagID(t.ID)
}

// ClearTag clears the tag edge to Tag.
func (suo *ServiceUpdateOne) ClearTag() *ServiceUpdateOne {
	suo.clearedTag = true
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	if suo.Name != nil {
		if err := service.NameValidator(*suo.Name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
		}
	}
	if len(suo.tag) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"tag\"")
	}
	return suo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ServiceUpdateOne) sqlSave(ctx context.Context) (s *Service, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  suo.id,
				Type:   field.TypeInt,
				Column: service.FieldID,
			},
		},
	}
	if value := suo.Name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: service.FieldName,
		})
	}
	if value := suo.PubKey; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: service.FieldPubKey,
		})
	}
	if value := suo.IsActivated; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: service.FieldIsActivated,
		})
	}
	if suo.clearedTag {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.TagTable,
			Columns: []string{service.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.tag; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.TagTable,
			Columns: []string{service.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Service{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
