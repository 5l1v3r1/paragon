// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/jobtemplate"
)

// JobTemplateCreate is the builder for creating a JobTemplate entity.
type JobTemplateCreate struct {
	config
	Name    *string
	Content *string
	jobs    map[int]struct{}
	tags    map[int]struct{}
}

// SetName sets the Name field.
func (jtc *JobTemplateCreate) SetName(s string) *JobTemplateCreate {
	jtc.Name = &s
	return jtc
}

// SetContent sets the Content field.
func (jtc *JobTemplateCreate) SetContent(s string) *JobTemplateCreate {
	jtc.Content = &s
	return jtc
}

// AddJobIDs adds the jobs edge to Job by ids.
func (jtc *JobTemplateCreate) AddJobIDs(ids ...int) *JobTemplateCreate {
	if jtc.jobs == nil {
		jtc.jobs = make(map[int]struct{})
	}
	for i := range ids {
		jtc.jobs[ids[i]] = struct{}{}
	}
	return jtc
}

// AddJobs adds the jobs edges to Job.
func (jtc *JobTemplateCreate) AddJobs(j ...*Job) *JobTemplateCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jtc.AddJobIDs(ids...)
}

// AddTagIDs adds the tags edge to Tag by ids.
func (jtc *JobTemplateCreate) AddTagIDs(ids ...int) *JobTemplateCreate {
	if jtc.tags == nil {
		jtc.tags = make(map[int]struct{})
	}
	for i := range ids {
		jtc.tags[ids[i]] = struct{}{}
	}
	return jtc
}

// AddTags adds the tags edges to Tag.
func (jtc *JobTemplateCreate) AddTags(t ...*Tag) *JobTemplateCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return jtc.AddTagIDs(ids...)
}

// Save creates the JobTemplate in the database.
func (jtc *JobTemplateCreate) Save(ctx context.Context) (*JobTemplate, error) {
	if jtc.Name == nil {
		return nil, errors.New("ent: missing required field \"Name\"")
	}
	if err := jobtemplate.NameValidator(*jtc.Name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
	}
	if jtc.Content == nil {
		return nil, errors.New("ent: missing required field \"Content\"")
	}
	if err := jobtemplate.ContentValidator(*jtc.Content); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"Content\": %v", err)
	}
	return jtc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (jtc *JobTemplateCreate) SaveX(ctx context.Context) *JobTemplate {
	v, err := jtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (jtc *JobTemplateCreate) sqlSave(ctx context.Context) (*JobTemplate, error) {
	var (
		res sql.Result
		jt  = &JobTemplate{config: jtc.config}
	)
	tx, err := jtc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	builder := sql.Dialect(jtc.driver.Dialect()).
		Insert(jobtemplate.Table).
		Default()
	if value := jtc.Name; value != nil {
		builder.Set(jobtemplate.FieldName, *value)
		jt.Name = *value
	}
	if value := jtc.Content; value != nil {
		builder.Set(jobtemplate.FieldContent, *value)
		jt.Content = *value
	}
	query, args := builder.Query()
	if err := tx.Exec(ctx, query, args, &res); err != nil {
		return nil, rollback(tx, err)
	}
	id, err := res.LastInsertId()
	if err != nil {
		return nil, rollback(tx, err)
	}
	jt.ID = int(id)
	if len(jtc.jobs) > 0 {
		p := sql.P()
		for eid := range jtc.jobs {
			p.Or().EQ(job.FieldID, eid)
		}
		query, args := sql.Update(jobtemplate.JobsTable).
			Set(jobtemplate.JobsColumn, id).
			Where(sql.And(p, sql.IsNull(jobtemplate.JobsColumn))).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
		affected, err := res.RowsAffected()
		if err != nil {
			return nil, rollback(tx, err)
		}
		if int(affected) < len(jtc.jobs) {
			return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"jobs\" %v already connected to a different \"JobTemplate\"", keys(jtc.jobs))})
		}
	}
	if len(jtc.tags) > 0 {
		for eid := range jtc.tags {

			query, args := sql.Insert(jobtemplate.TagsTable).
				Columns(jobtemplate.TagsPrimaryKey[0], jobtemplate.TagsPrimaryKey[1]).
				Values(id, eid).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return jt, nil
}
