// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kcarretto/paragon/ent/file"
)

// FileCreate is the builder for creating a File entity.
type FileCreate struct {
	config
	Name             *string
	CreationTime     *time.Time
	LastModifiedTime *time.Time
	Size             *int
	Content          *[]byte
}

// SetName sets the Name field.
func (fc *FileCreate) SetName(s string) *FileCreate {
	fc.Name = &s
	return fc
}

// SetCreationTime sets the CreationTime field.
func (fc *FileCreate) SetCreationTime(t time.Time) *FileCreate {
	fc.CreationTime = &t
	return fc
}

// SetNillableCreationTime sets the CreationTime field if the given value is not nil.
func (fc *FileCreate) SetNillableCreationTime(t *time.Time) *FileCreate {
	if t != nil {
		fc.SetCreationTime(*t)
	}
	return fc
}

// SetLastModifiedTime sets the LastModifiedTime field.
func (fc *FileCreate) SetLastModifiedTime(t time.Time) *FileCreate {
	fc.LastModifiedTime = &t
	return fc
}

// SetSize sets the Size field.
func (fc *FileCreate) SetSize(i int) *FileCreate {
	fc.Size = &i
	return fc
}

// SetNillableSize sets the Size field if the given value is not nil.
func (fc *FileCreate) SetNillableSize(i *int) *FileCreate {
	if i != nil {
		fc.SetSize(*i)
	}
	return fc
}

// SetContent sets the Content field.
func (fc *FileCreate) SetContent(b []byte) *FileCreate {
	fc.Content = &b
	return fc
}

// Save creates the File in the database.
func (fc *FileCreate) Save(ctx context.Context) (*File, error) {
	if fc.Name == nil {
		return nil, errors.New("ent: missing required field \"Name\"")
	}
	if err := file.NameValidator(*fc.Name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
	}
	if fc.CreationTime == nil {
		v := file.DefaultCreationTime()
		fc.CreationTime = &v
	}
	if fc.LastModifiedTime == nil {
		return nil, errors.New("ent: missing required field \"LastModifiedTime\"")
	}
	if fc.Size == nil {
		v := file.DefaultSize
		fc.Size = &v
	}
	if err := file.SizeValidator(*fc.Size); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"Size\": %v", err)
	}
	if fc.Content == nil {
		return nil, errors.New("ent: missing required field \"Content\"")
	}
	return fc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FileCreate) SaveX(ctx context.Context) *File {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fc *FileCreate) sqlSave(ctx context.Context) (*File, error) {
	var (
		f     = &File{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: file.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: file.FieldID,
			},
		}
	)
	if value := fc.Name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldName,
		})
		f.Name = *value
	}
	if value := fc.CreationTime; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: file.FieldCreationTime,
		})
		f.CreationTime = *value
	}
	if value := fc.LastModifiedTime; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: file.FieldLastModifiedTime,
		})
		f.LastModifiedTime = *value
	}
	if value := fc.Size; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: file.FieldSize,
		})
		f.Size = *value
	}
	if value := fc.Content; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  *value,
			Column: file.FieldContent,
		})
		f.Content = *value
	}
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	f.ID = int(id)
	return f, nil
}
