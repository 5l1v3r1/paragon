// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/tag"
	"github.com/kcarretto/paragon/ent/target"
	"github.com/kcarretto/paragon/ent/task"
)

// TagCreate is the builder for creating a Tag entity.
type TagCreate struct {
	config
	Name    *string
	targets map[int]struct{}
	tasks   map[int]struct{}
	jobs    map[int]struct{}
}

// SetName sets the Name field.
func (tc *TagCreate) SetName(s string) *TagCreate {
	tc.Name = &s
	return tc
}

// AddTargetIDs adds the targets edge to Target by ids.
func (tc *TagCreate) AddTargetIDs(ids ...int) *TagCreate {
	if tc.targets == nil {
		tc.targets = make(map[int]struct{})
	}
	for i := range ids {
		tc.targets[ids[i]] = struct{}{}
	}
	return tc
}

// AddTargets adds the targets edges to Target.
func (tc *TagCreate) AddTargets(t ...*Target) *TagCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTargetIDs(ids...)
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (tc *TagCreate) AddTaskIDs(ids ...int) *TagCreate {
	if tc.tasks == nil {
		tc.tasks = make(map[int]struct{})
	}
	for i := range ids {
		tc.tasks[ids[i]] = struct{}{}
	}
	return tc
}

// AddTasks adds the tasks edges to Task.
func (tc *TagCreate) AddTasks(t ...*Task) *TagCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTaskIDs(ids...)
}

// AddJobIDs adds the jobs edge to Job by ids.
func (tc *TagCreate) AddJobIDs(ids ...int) *TagCreate {
	if tc.jobs == nil {
		tc.jobs = make(map[int]struct{})
	}
	for i := range ids {
		tc.jobs[ids[i]] = struct{}{}
	}
	return tc
}

// AddJobs adds the jobs edges to Job.
func (tc *TagCreate) AddJobs(j ...*Job) *TagCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return tc.AddJobIDs(ids...)
}

// Save creates the Tag in the database.
func (tc *TagCreate) Save(ctx context.Context) (*Tag, error) {
	if tc.Name == nil {
		return nil, errors.New("ent: missing required field \"Name\"")
	}
	if err := tag.NameValidator(*tc.Name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
	}
	return tc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TagCreate) SaveX(ctx context.Context) *Tag {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TagCreate) sqlSave(ctx context.Context) (*Tag, error) {
	var (
		t    = &Tag{config: tc.config}
		spec = &sqlgraph.CreateSpec{
			Table: tag.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tag.FieldID,
			},
		}
	)
	if value := tc.Name; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: tag.FieldName,
		})
		t.Name = *value
	}
	if nodes := tc.targets; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TargetsTable,
			Columns: tag.TargetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if nodes := tc.tasks; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TasksTable,
			Columns: tag.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if nodes := tc.jobs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.JobsTable,
			Columns: tag.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, tc.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := spec.ID.Value.(int64)
	t.ID = int(id)
	return t, nil
}
