// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/tag"
	"github.com/kcarretto/paragon/ent/target"
	"github.com/kcarretto/paragon/ent/task"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	QueueTime       *time.Time
	LastChangedTime *time.Time
	ClaimTime       *time.Time
	ExecStartTime   *time.Time
	ExecStopTime    *time.Time
	Content         *string
	Output          *string
	Error           *string
	SessionID       *string
	tags            map[int]struct{}
	job             map[int]struct{}
	target          map[int]struct{}
}

// SetQueueTime sets the QueueTime field.
func (tc *TaskCreate) SetQueueTime(t time.Time) *TaskCreate {
	tc.QueueTime = &t
	return tc
}

// SetNillableQueueTime sets the QueueTime field if the given value is not nil.
func (tc *TaskCreate) SetNillableQueueTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetQueueTime(*t)
	}
	return tc
}

// SetLastChangedTime sets the LastChangedTime field.
func (tc *TaskCreate) SetLastChangedTime(t time.Time) *TaskCreate {
	tc.LastChangedTime = &t
	return tc
}

// SetClaimTime sets the ClaimTime field.
func (tc *TaskCreate) SetClaimTime(t time.Time) *TaskCreate {
	tc.ClaimTime = &t
	return tc
}

// SetNillableClaimTime sets the ClaimTime field if the given value is not nil.
func (tc *TaskCreate) SetNillableClaimTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetClaimTime(*t)
	}
	return tc
}

// SetExecStartTime sets the ExecStartTime field.
func (tc *TaskCreate) SetExecStartTime(t time.Time) *TaskCreate {
	tc.ExecStartTime = &t
	return tc
}

// SetNillableExecStartTime sets the ExecStartTime field if the given value is not nil.
func (tc *TaskCreate) SetNillableExecStartTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetExecStartTime(*t)
	}
	return tc
}

// SetExecStopTime sets the ExecStopTime field.
func (tc *TaskCreate) SetExecStopTime(t time.Time) *TaskCreate {
	tc.ExecStopTime = &t
	return tc
}

// SetNillableExecStopTime sets the ExecStopTime field if the given value is not nil.
func (tc *TaskCreate) SetNillableExecStopTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetExecStopTime(*t)
	}
	return tc
}

// SetContent sets the Content field.
func (tc *TaskCreate) SetContent(s string) *TaskCreate {
	tc.Content = &s
	return tc
}

// SetOutput sets the Output field.
func (tc *TaskCreate) SetOutput(s string) *TaskCreate {
	tc.Output = &s
	return tc
}

// SetNillableOutput sets the Output field if the given value is not nil.
func (tc *TaskCreate) SetNillableOutput(s *string) *TaskCreate {
	if s != nil {
		tc.SetOutput(*s)
	}
	return tc
}

// SetError sets the Error field.
func (tc *TaskCreate) SetError(s string) *TaskCreate {
	tc.Error = &s
	return tc
}

// SetNillableError sets the Error field if the given value is not nil.
func (tc *TaskCreate) SetNillableError(s *string) *TaskCreate {
	if s != nil {
		tc.SetError(*s)
	}
	return tc
}

// SetSessionID sets the SessionID field.
func (tc *TaskCreate) SetSessionID(s string) *TaskCreate {
	tc.SessionID = &s
	return tc
}

// SetNillableSessionID sets the SessionID field if the given value is not nil.
func (tc *TaskCreate) SetNillableSessionID(s *string) *TaskCreate {
	if s != nil {
		tc.SetSessionID(*s)
	}
	return tc
}

// AddTagIDs adds the tags edge to Tag by ids.
func (tc *TaskCreate) AddTagIDs(ids ...int) *TaskCreate {
	if tc.tags == nil {
		tc.tags = make(map[int]struct{})
	}
	for i := range ids {
		tc.tags[ids[i]] = struct{}{}
	}
	return tc
}

// AddTags adds the tags edges to Tag.
func (tc *TaskCreate) AddTags(t ...*Tag) *TaskCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTagIDs(ids...)
}

// SetJobID sets the job edge to Job by id.
func (tc *TaskCreate) SetJobID(id int) *TaskCreate {
	if tc.job == nil {
		tc.job = make(map[int]struct{})
	}
	tc.job[id] = struct{}{}
	return tc
}

// SetJob sets the job edge to Job.
func (tc *TaskCreate) SetJob(j *Job) *TaskCreate {
	return tc.SetJobID(j.ID)
}

// SetTargetID sets the target edge to Target by id.
func (tc *TaskCreate) SetTargetID(id int) *TaskCreate {
	if tc.target == nil {
		tc.target = make(map[int]struct{})
	}
	tc.target[id] = struct{}{}
	return tc
}

// SetNillableTargetID sets the target edge to Target by id if the given value is not nil.
func (tc *TaskCreate) SetNillableTargetID(id *int) *TaskCreate {
	if id != nil {
		tc = tc.SetTargetID(*id)
	}
	return tc
}

// SetTarget sets the target edge to Target.
func (tc *TaskCreate) SetTarget(t *Target) *TaskCreate {
	return tc.SetTargetID(t.ID)
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	if tc.QueueTime == nil {
		v := task.DefaultQueueTime()
		tc.QueueTime = &v
	}
	if tc.LastChangedTime == nil {
		return nil, errors.New("ent: missing required field \"LastChangedTime\"")
	}
	if tc.Content == nil {
		return nil, errors.New("ent: missing required field \"Content\"")
	}
	if err := task.ContentValidator(*tc.Content); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"Content\": %v", err)
	}
	if len(tc.job) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"job\"")
	}
	if tc.job == nil {
		return nil, errors.New("ent: missing required edge \"job\"")
	}
	if len(tc.target) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"target\"")
	}
	return tc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	var (
		t     = &Task{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: task.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: task.FieldID,
			},
		}
	)
	if value := tc.QueueTime; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: task.FieldQueueTime,
		})
		t.QueueTime = *value
	}
	if value := tc.LastChangedTime; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: task.FieldLastChangedTime,
		})
		t.LastChangedTime = *value
	}
	if value := tc.ClaimTime; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: task.FieldClaimTime,
		})
		t.ClaimTime = *value
	}
	if value := tc.ExecStartTime; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: task.FieldExecStartTime,
		})
		t.ExecStartTime = *value
	}
	if value := tc.ExecStopTime; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: task.FieldExecStopTime,
		})
		t.ExecStopTime = *value
	}
	if value := tc.Content; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: task.FieldContent,
		})
		t.Content = *value
	}
	if value := tc.Output; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: task.FieldOutput,
		})
		t.Output = *value
	}
	if value := tc.Error; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: task.FieldError,
		})
		t.Error = *value
	}
	if value := tc.SessionID; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: task.FieldSessionID,
		})
		t.SessionID = *value
	}
	if nodes := tc.tags; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: task.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.job; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.JobTable,
			Columns: []string{task.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.target; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TargetTable,
			Columns: []string{task.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	t.ID = int(id)
	return t, nil
}
