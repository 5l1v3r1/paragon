// Code generated by entc, DO NOT EDIT.

package user

import (
	"github.com/kcarretto/paragon/ent/schema"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name vertex property in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email vertex property in the database.
	FieldEmail = "email"
	// FieldOAuthID holds the string denoting the oauthid vertex property in the database.
	FieldOAuthID = "o_auth_id"
	// FieldPhotoURL holds the string denoting the photourl vertex property in the database.
	FieldPhotoURL = "photo_url"
	// FieldSessionToken holds the string denoting the sessiontoken vertex property in the database.
	FieldSessionToken = "session_token"
	// FieldActivated holds the string denoting the activated vertex property in the database.
	FieldActivated = "activated"

	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldOAuthID,
	FieldPhotoURL,
	FieldSessionToken,
	FieldActivated,
}

var (
	fields = schema.User{}.Fields()

	// descName is the schema descriptor for Name field.
	descName = fields[0].Descriptor()
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator = func() func(string) error {
		validators := descName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(Name string) error {
			for _, fn := range fns {
				if err := fn(Name); err != nil {
					return err
				}
			}
			return nil
		}
	}()

	// descActivated is the schema descriptor for Activated field.
	descActivated = fields[5].Descriptor()
	// DefaultActivated holds the default value on creation for the Activated field.
	DefaultActivated = descActivated.Default.(bool)
)
