// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/kcarretto/paragon/ent/file"
	"github.com/kcarretto/paragon/ent/link"
	"github.com/kcarretto/paragon/ent/predicate"
)

// LinkUpdate is the builder for updating Link entities.
type LinkUpdate struct {
	config
	Alias               *string
	ExpirationTime      *time.Time
	clearExpirationTime bool
	Clicks              *int
	addClicks           *int
	file                map[int]struct{}
	clearedFile         bool
	predicates          []predicate.Link
}

// Where adds a new predicate for the builder.
func (lu *LinkUpdate) Where(ps ...predicate.Link) *LinkUpdate {
	lu.predicates = append(lu.predicates, ps...)
	return lu
}

// SetAlias sets the Alias field.
func (lu *LinkUpdate) SetAlias(s string) *LinkUpdate {
	lu.Alias = &s
	return lu
}

// SetExpirationTime sets the ExpirationTime field.
func (lu *LinkUpdate) SetExpirationTime(t time.Time) *LinkUpdate {
	lu.ExpirationTime = &t
	return lu
}

// SetNillableExpirationTime sets the ExpirationTime field if the given value is not nil.
func (lu *LinkUpdate) SetNillableExpirationTime(t *time.Time) *LinkUpdate {
	if t != nil {
		lu.SetExpirationTime(*t)
	}
	return lu
}

// ClearExpirationTime clears the value of ExpirationTime.
func (lu *LinkUpdate) ClearExpirationTime() *LinkUpdate {
	lu.ExpirationTime = nil
	lu.clearExpirationTime = true
	return lu
}

// SetClicks sets the Clicks field.
func (lu *LinkUpdate) SetClicks(i int) *LinkUpdate {
	lu.Clicks = &i
	lu.addClicks = nil
	return lu
}

// SetNillableClicks sets the Clicks field if the given value is not nil.
func (lu *LinkUpdate) SetNillableClicks(i *int) *LinkUpdate {
	if i != nil {
		lu.SetClicks(*i)
	}
	return lu
}

// AddClicks adds i to Clicks.
func (lu *LinkUpdate) AddClicks(i int) *LinkUpdate {
	if lu.addClicks == nil {
		lu.addClicks = &i
	} else {
		*lu.addClicks += i
	}
	return lu
}

// SetFileID sets the file edge to File by id.
func (lu *LinkUpdate) SetFileID(id int) *LinkUpdate {
	if lu.file == nil {
		lu.file = make(map[int]struct{})
	}
	lu.file[id] = struct{}{}
	return lu
}

// SetNillableFileID sets the file edge to File by id if the given value is not nil.
func (lu *LinkUpdate) SetNillableFileID(id *int) *LinkUpdate {
	if id != nil {
		lu = lu.SetFileID(*id)
	}
	return lu
}

// SetFile sets the file edge to File.
func (lu *LinkUpdate) SetFile(f *File) *LinkUpdate {
	return lu.SetFileID(f.ID)
}

// ClearFile clears the file edge to File.
func (lu *LinkUpdate) ClearFile() *LinkUpdate {
	lu.clearedFile = true
	return lu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (lu *LinkUpdate) Save(ctx context.Context) (int, error) {
	if lu.Alias != nil {
		if err := link.AliasValidator(*lu.Alias); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"Alias\": %v", err)
		}
	}
	if lu.Clicks != nil {
		if err := link.ClicksValidator(*lu.Clicks); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"Clicks\": %v", err)
		}
	}
	if len(lu.file) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"file\"")
	}
	return lu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LinkUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LinkUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LinkUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   link.Table,
			Columns: link.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: link.FieldID,
			},
		},
	}
	if ps := lu.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := lu.Alias; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: link.FieldAlias,
		})
	}
	if value := lu.ExpirationTime; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: link.FieldExpirationTime,
		})
	}
	if lu.clearExpirationTime {
		spec.Fields.Clear = append(spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: link.FieldExpirationTime,
		})
	}
	if value := lu.Clicks; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: link.FieldClicks,
		})
	}
	if value := lu.addClicks; value != nil {
		spec.Fields.Add = append(spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: link.FieldClicks,
		})
	}
	if lu.clearedFile {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   link.FileTable,
			Columns: []string{link.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := lu.file; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   link.FileTable,
			Columns: []string{link.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LinkUpdateOne is the builder for updating a single Link entity.
type LinkUpdateOne struct {
	config
	id                  int
	Alias               *string
	ExpirationTime      *time.Time
	clearExpirationTime bool
	Clicks              *int
	addClicks           *int
	file                map[int]struct{}
	clearedFile         bool
}

// SetAlias sets the Alias field.
func (luo *LinkUpdateOne) SetAlias(s string) *LinkUpdateOne {
	luo.Alias = &s
	return luo
}

// SetExpirationTime sets the ExpirationTime field.
func (luo *LinkUpdateOne) SetExpirationTime(t time.Time) *LinkUpdateOne {
	luo.ExpirationTime = &t
	return luo
}

// SetNillableExpirationTime sets the ExpirationTime field if the given value is not nil.
func (luo *LinkUpdateOne) SetNillableExpirationTime(t *time.Time) *LinkUpdateOne {
	if t != nil {
		luo.SetExpirationTime(*t)
	}
	return luo
}

// ClearExpirationTime clears the value of ExpirationTime.
func (luo *LinkUpdateOne) ClearExpirationTime() *LinkUpdateOne {
	luo.ExpirationTime = nil
	luo.clearExpirationTime = true
	return luo
}

// SetClicks sets the Clicks field.
func (luo *LinkUpdateOne) SetClicks(i int) *LinkUpdateOne {
	luo.Clicks = &i
	luo.addClicks = nil
	return luo
}

// SetNillableClicks sets the Clicks field if the given value is not nil.
func (luo *LinkUpdateOne) SetNillableClicks(i *int) *LinkUpdateOne {
	if i != nil {
		luo.SetClicks(*i)
	}
	return luo
}

// AddClicks adds i to Clicks.
func (luo *LinkUpdateOne) AddClicks(i int) *LinkUpdateOne {
	if luo.addClicks == nil {
		luo.addClicks = &i
	} else {
		*luo.addClicks += i
	}
	return luo
}

// SetFileID sets the file edge to File by id.
func (luo *LinkUpdateOne) SetFileID(id int) *LinkUpdateOne {
	if luo.file == nil {
		luo.file = make(map[int]struct{})
	}
	luo.file[id] = struct{}{}
	return luo
}

// SetNillableFileID sets the file edge to File by id if the given value is not nil.
func (luo *LinkUpdateOne) SetNillableFileID(id *int) *LinkUpdateOne {
	if id != nil {
		luo = luo.SetFileID(*id)
	}
	return luo
}

// SetFile sets the file edge to File.
func (luo *LinkUpdateOne) SetFile(f *File) *LinkUpdateOne {
	return luo.SetFileID(f.ID)
}

// ClearFile clears the file edge to File.
func (luo *LinkUpdateOne) ClearFile() *LinkUpdateOne {
	luo.clearedFile = true
	return luo
}

// Save executes the query and returns the updated entity.
func (luo *LinkUpdateOne) Save(ctx context.Context) (*Link, error) {
	if luo.Alias != nil {
		if err := link.AliasValidator(*luo.Alias); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"Alias\": %v", err)
		}
	}
	if luo.Clicks != nil {
		if err := link.ClicksValidator(*luo.Clicks); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"Clicks\": %v", err)
		}
	}
	if len(luo.file) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"file\"")
	}
	return luo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LinkUpdateOne) SaveX(ctx context.Context) *Link {
	l, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return l
}

// Exec executes the query on the entity.
func (luo *LinkUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LinkUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LinkUpdateOne) sqlSave(ctx context.Context) (l *Link, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   link.Table,
			Columns: link.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  luo.id,
				Type:   field.TypeInt,
				Column: link.FieldID,
			},
		},
	}
	if value := luo.Alias; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: link.FieldAlias,
		})
	}
	if value := luo.ExpirationTime; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: link.FieldExpirationTime,
		})
	}
	if luo.clearExpirationTime {
		spec.Fields.Clear = append(spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: link.FieldExpirationTime,
		})
	}
	if value := luo.Clicks; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: link.FieldClicks,
		})
	}
	if value := luo.addClicks; value != nil {
		spec.Fields.Add = append(spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: link.FieldClicks,
		})
	}
	if luo.clearedFile {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   link.FileTable,
			Columns: []string{link.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := luo.file; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   link.FileTable,
			Columns: []string{link.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	l = &Link{config: luo.config}
	spec.Assign = l.assignValues
	spec.ScanValues = l.scanValues()
	if err = sqlgraph.UpdateNode(ctx, luo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return l, nil
}
