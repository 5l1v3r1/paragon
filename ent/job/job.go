// Code generated by entc, DO NOT EDIT.

package job

import (
	"github.com/kcarretto/paragon/ent/schema"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name vertex property in the database.
	FieldName = "name"
	// FieldParameters holds the string denoting the parameters vertex property in the database.
	FieldParameters = "parameters"

	// Table holds the table name of the job in the database.
	Table = "jobs"
	// TasksTable is the table the holds the tasks relation/edge.
	TasksTable = "tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "job_id"
	// TagsTable is the table the holds the tags relation/edge. The primary key declared below.
	TagsTable = "job_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// TemplateTable is the table the holds the template relation/edge.
	TemplateTable = "jobs"
	// TemplateInverseTable is the table name for the JobTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "jobtemplate" package.
	TemplateInverseTable = "job_templates"
	// TemplateColumn is the table column denoting the template relation/edge.
	TemplateColumn = "template_id"
)

// Columns holds all SQL columns are job fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldParameters,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"job_id", "tag_id"}
)

var (
	fields = schema.Job{}.Fields()

	// descName is the schema descriptor for Name field.
	descName = fields[0].Descriptor()
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator = descName.Validators[0].(func(string) error)
)
